<?xml version="1.0" encoding="utf-8"?>
<topic id="e22b4127-e7a9-47ca-bd1c-7ac81efcc051" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>AUSTRA arithmetics is basically the same as on most programming languages. Our language supports:</para>
      <list class="bullet">
        <listItem><para>32 bits integers, represented by the <codeInline>int</codeInline> type.</para></listItem>
        <listItem><para>64 bits double-precision reals, represented by the <codeInline>double</codeInline> type.</para></listItem>
        <listItem><para>2x64 bits double-precision complex vañies, by represented the <codeInline>complex</codeInline> type.</para></listItem>
      </list>
    </introduction>
    <section address="Section1">
      <title>Operators</title>
      <content>
        <para>These are the operators available for integers and reals:</para>
        <table>
          <row>
        	<entry><para><codeInline>+</codeInline></para></entry>
        	<entry><para>Addition. Can also be used as a unary operator.</para></entry>
          </row>
          <row>
        	<entry><para><codeInline>-</codeInline></para></entry>
        	<entry><para>Subtraction. Can also be used as a unary operator for negation.</para></entry>
          </row>
          <row>
        	<entry><para><codeInline>*</codeInline></para></entry>
        	<entry><para>Multiplication.</para></entry>
          </row>
          <row>
        	<entry><para><codeInline>/</codeInline></para></entry>
        	<entry><para>Both real and integer division.</para></entry>
          </row>
          <row>
        	<entry><para><codeInline>%</codeInline></para></entry>
        	<entry><para>Both integer and real remainders.</para></entry>
          </row>
          <row>
        	<entry><para><codeInline>^</codeInline></para></entry>
        	<entry><para>Power: <codeInline>2^3 = 8</codeInline>, <codeInline>9^0.5 = 3</codeInline>.</para></entry>
          </row>
        </table>
        <para>Most of them may also be used with complex numbers.</para>
        <para>Though the power operator works both for integer, real and complex numbers, the
compiler optimizes the special cases when the power is <math>2</math>, <math>3</math> and <math>4</math>, so equalities
like this exactly holds:</para>
		<code language="Austra">
i^2 = -1
		</code>
<para>The multiplication operator can be elided when the first operand is a real or an
integer and it is immediately followed by an identifier:</para>
		<code language="Austra">
2pi = 2 * pi
2x^2 + 3x + 1 = 2*x^2 + 3*x + 1
1/2x = 1 / (2*x)
		</code>
		<para>AUSTRA also recognizes a superscript <math>2</math> (<codeInline>²</codeInline>) as an operator to square a value:</para>
		<code language="Austra">
2x² + 3x + 1 = 2*x^2 + 3*x + 1
		</code>
		<para>The AUSTRA code editor simplifies typing this operator with the keys combination (Ctrl+G, 2).</para>
		<sections>
		  <section address="Section2">
		    <title>Comparisons</title>
		    <content>
		    <para>These operators are used for comparing all compatible operands:</para>
		    <table>
		      <row>
		        <entry><para><codeInline>=</codeInline></para></entry>
		        <entry><para>Equality.</para></entry>
		      </row>
		      <row>
		        <entry><para><codeInline>!=</codeInline></para></entry>
		        <entry><para>Inequality.</para></entry>
		      </row>
		      <row>
		        <entry><para><codeInline>&lt;&gt;</codeInline></para></entry>
		        <entry><para>A synonym for the inequality operator.</para></entry>
		      </row>
		      <row>
		        <entry><para><codeInline>&lt;</codeInline></para></entry>
		        <entry><para>Less than.</para></entry>
		      </row>
		      <row>
		        <entry><para><codeInline>&lt;=</codeInline></para></entry>
		        <entry><para>Less than or equal to.</para></entry>
		      </row>
		      <row>
		        <entry><para><codeInline>&gt;</codeInline></para></entry>
		        <entry><para>Greater than.</para></entry>
		      </row>
		      <row>
		        <entry><para><codeInline>&gt;=</codeInline></para></entry>
		        <entry><para>Greater than or equal to.</para></entry>
		      </row>
		    </table>
		    <para>Comparisons can be fused for numeric operands using the following syntax:</para>
		    <code language="Austra">
sqrt(pi) &lt;= pi &lt;= pi²
            </code>
			<para>Fused ranges only require combining same-direction comparisons. For instance, <codeInline>&lt;=</codeInline>
and <codeInline>&lt;</codeInline> are compatible, but <codeInline>&lt;</codeInline> and <codeInline>&gt;</codeInline> are not.</para>
		    </content>
		  </section>
		</sections>
      </content>
    </section>
    <relatedTopics>
	  <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">Code definitions</link>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>