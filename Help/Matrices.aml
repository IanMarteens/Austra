<?xml version="1.0" encoding="utf-8"?>
<topic id="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>AUSTRA matrices are represented by the <codeInline>matrix</codeInline> class. They are implemented as row-first, double precision dense matrices.</para>
      <para>The AUSTRA <codeInline>matrix</codeInline> class is based on three different C# structures: <codeEntityReference qualifyHint="false">T:Austra.Library.Matrix</codeEntityReference>, <codeEntityReference qualifyHint="false">T:Austra.Library.LMatrix</codeEntityReference>, and <codeEntityReference qualifyHint="false">T:Austra.Library.RMatrix</codeEntityReference>. The compiler takes automatically care of any conversions when needed.</para>
    </introduction>
    <section>
      <title>Matrix construction</title>
      <content>
        <para>A matrix can be constructed by enclosing its components inside brackets:</para>
		<code language="Austra">
[1, 2, 3; 2, 3, 4; 3, 4, 5]
		</code>
		<para>Rows must be separated by semicolons (<codeInline>;</codeInline>), and items in a row must be separated by commas. This syntax does not allows writing a matrix with only one row, since the compiler would not be able to tell it from a <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">vectors</link>. A workaround is writing a matrix with only one column, and transposing it:</para>
		<code language="Austra">
[1; 2; 3; 4]'
		</code>
		<para>You can also create a new matrix by concatenating two existing matrices, or a matrix and a vector. You can use either vertical or horizontal concatenation:</para>
		<code language="Austra">
let m = [1,2;3,4], v=[1, 1];
<markup><font color="DarkGreen">-- Horizontal concatenation (2x4 matrix).</font></markup>
[m, m];
<markup><font color="DarkGreen">-- Horizontal concatenation (2x3 matrix).</font></markup>
[m, v];
[v, m];
<markup><font color="DarkGreen">-- Vertical concatenation (4x2 matrix).</font></markup>
[m; m];
<markup><font color="DarkGreen">-- Vertical concatenation (3x2 matrix).
The vector is handled as a row vector.</font></markup>
[m; v];
[v; m];
		</code>
		<sections>
		  <section address="matCtors">
		    <title>Class methods</title>
		    <content>
		      <para>These class methods are available for creating matrices:</para>
			  <table>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::new</codeInline></para></entry>
 		    	  <entry><para>Overloaded constructor (see below).</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::rows</codeInline></para></entry>
 		    	  <entry><para>Creates a matrix given its rows as vectors.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::cols</codeInline></para></entry>
 		    	  <entry><para>Creates a matrix given its cols as vectors.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::eye</codeInline></para></entry>
 		    	  <entry><para>Creates an identity matrix given its size.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::diag</codeInline></para></entry>
 		    	  <entry><para>Creates a diagonal matrix given the diagonal as a vector.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::random</codeInline></para></entry>
 		    	  <entry><para>Creates a matrix with random values from a uniform distribution.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::nrandom</codeInline></para></entry>
 		    	  <entry><para>Creates a matrix with random values from a normal standard distribution.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::lrandom</codeInline></para></entry>
 		    	  <entry><para>Creates a lower-triangular matrix with random values from a uniform distribution.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::cov</codeInline></para></entry>
 		    	  <entry><para>Creates a covariance matrix given a list of series.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>matrix::corr</codeInline></para></entry>
 		    	  <entry><para>Creates a correlation matrix given a list of series.</para></entry>
		  		</row>
			  </table>
		    </content>
		  </section>
		</sections>
      </content>
    </section>
    <section address="Section1">
      <title>Indexing and slicing</title>
      <content>
		<para>Individual cells are accessed using the row and column inside brackets:</para>
		<code language="Austra">
mat[0, 0];
mat[mat.rows - 1, mat.cols - 1]
		</code>
		<para>All indexes starts from zero. If the row index is omitted, a whole column is returned:</para>
		<code language="Austra">
mat[, 0]
		</code>
		<para>Omitting the column number yields a whole row:</para>
		<code language="Austra">
mat[0,];
mat[0]
		</code>
		<para>Carets can also be used in any of the two indexes, to count positions from the end. For instance, this expression returns the rightmost lower cell of the matrix:</para>
		<code language="Austra">
mat[^1, ^1]
		</code>
		<para>Columns and rows can also be extracted as vectors using relative indexes:</para>
		<code language="Austra">
mat[, ^2]; <markup><font color="DarkGreen">-- Next to last column.</font></markup>
mat[^2,]   <markup><font color="DarkGreen">-- Next to last row.</font></markup>
		</code>
		<para>Ranges are accepted for both dimensions, and can be combined with indexes too:</para>
		<code language="Austra">
<markup><font color="DarkGreen">-- Remove last row and last column.</font></markup>
mat[0..^1, 0..^1];
<markup><font color="DarkGreen">-- Last row without first and last items.</font></markup>
mat[^1, 1..^1] 
		</code>
      </content>
    </section>
    <relatedTopics>
	  <codeEntityReference qualifyHint="false">T:Austra.Library.Matrix</codeEntityReference>
	  <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">Code definitions</link>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>