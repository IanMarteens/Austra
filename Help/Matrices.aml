<?xml version="1.0" encoding="utf-8"?>
<topic id="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>AUSTRA matrices are represented by the <codeInline>matrix</codeInline> class. They are implemented as row-first, double precision dense matrices.</para>
      <para>The AUSTRA <codeInline>matrix</codeInline> class is based on three different C# structures: <codeEntityReference qualifyHint="false">T:Austra.Library.Matrix</codeEntityReference>, <codeEntityReference qualifyHint="false">T:Austra.Library.LMatrix</codeEntityReference>, and <codeEntityReference qualifyHint="false">T:Austra.Library.RMatrix</codeEntityReference>. The compiler takes automatically care of any conversions when needed.</para>
    </introduction>
    <section address="matLiterals">
      <title>Matrix construction</title>
      <content>
        <para>A matrix can be constructed by enclosing its components inside brackets:</para>
		<code language="Austra">
[1, 2, 3; 2, 3, 4; 3, 4, 5]
		</code>
		<para>Rows must be separated by semicolons (<codeInline>;</codeInline>), and items in a row must be separated by commas. This syntax does not allows writing a matrix with only one row, since the compiler would not be able to tell it from a <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">vector</link>. A workaround is writing a matrix with only one column, and transposing it:</para>
		<code language="Austra">
[1; 2; 3; 4]'
		</code>
		<para>You can also create a new matrix by concatenating two existing matrices, or a matrix and a vector. You can use either vertical or horizontal concatenation:</para>
		<code language="Austra">
<markup><b>let</b></markup> m = [1,2;3,4], v=[1, 1];
<markup><font color="DarkGreen">-- Horizontal concatenation (2x4 matrix).</font></markup>
[m, m];
<markup><font color="DarkGreen">-- Horizontal concatenation (2x3 matrix).</font></markup>
[m, v];
[v, m];
<markup><font color="DarkGreen">-- Vertical concatenation (4x2 matrix).</font></markup>
[m; m];
<markup><font color="DarkGreen">-- Vertical concatenation (3x2 matrix).
The vector is handled as a row vector.</font></markup>
[m; v];
[v; m];
		</code>
      </content>
    </section>
	<section address="matrixCtors">
	  <title>Class methods</title>
	  <content>
	    <para>These class methods are available for creating matrices:</para>
		<table>
	  		<row>
	    	  <entry><para><codeInline>matrix::new</codeInline></para></entry>
	    	  <entry><para>Overloaded constructor (see below).</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::rows</codeInline></para></entry>
	    	  <entry><para>Creates a matrix given its rows as vectors.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::cols</codeInline></para></entry>
	    	  <entry><para>Creates a matrix given its cols as vectors.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::eye</codeInline></para></entry>
	    	  <entry><para>Creates an identity matrix given its size.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::diag</codeInline></para></entry>
	    	  <entry><para>Creates a diagonal matrix given the diagonal as a vector.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::random</codeInline></para></entry>
	    	  <entry><para>Creates a matrix with random values from a uniform distribution.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::nrandom</codeInline></para></entry>
	    	  <entry><para>Creates a matrix with random values from a normal standard distribution.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::lrandom</codeInline></para></entry>
	    	  <entry><para>Creates a lower-triangular matrix with random values from a uniform distribution.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::lnrandom</codeInline></para></entry>
	    	  <entry><para>Creates a lower-triangular matrix with random values from a standard normal distribution.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::cov</codeInline></para></entry>
	    	  <entry><para>Creates a covariance matrix given a list of series.</para></entry>
	  		</row>
	  		<row>
	    	  <entry><para><codeInline>matrix::corr</codeInline></para></entry>
	    	  <entry><para>Creates a correlation matrix given a list of series.</para></entry>
	  		</row>
		</table>
	  </content>
	</section>
    <section address="matMethods">
      <title>Methods and properties</title>
      <content>
        <para>These are the properties available for matrices:</para>
		<table>
		  <row>
	    	<entry><para><codeInline>amax</codeInline></para></entry>
	    	<entry><para>Gets the absolute maximum. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.AMax</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>amin</codeInline></para></entry>
	    	<entry><para>Gets the absolute minimum. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.AMin</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>chol</codeInline></para></entry>
	    	<entry><para>Calculates the Cholesky factorization. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Cholesky</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>cols</codeInline></para></entry>
	    	<entry><para>Gets the number of columns. See <codeEntityReference qualifyHint="false" autoUpgrade="true">P:Austra.Library.Matrix.Cols</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>det</codeInline></para></entry>
	    	<entry><para>Calculates the determinant. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Determinant</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>diag</codeInline></para></entry>
	    	<entry><para>Gets the main diagonal as a vector. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Diagonal</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>evd</codeInline></para></entry>
	    	<entry><para>Calculates the EigenValues Decomposition. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.EVD</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>inverse</codeInline></para></entry>
	    	<entry><para>Gets the inverse of this matrix. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Inverse</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>isSymmetric</codeInline></para></entry>
	    	<entry><para>Verifies if the matrix is a symmetric one. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.IsSymmetric</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>max</codeInline></para></entry>
	    	<entry><para>Gets the maximum value from the cells. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Maximum</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>min</codeInline></para></entry>
	    	<entry><para>Gets the minimum value from the cells. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Minimum</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>rows</codeInline></para></entry>
	    	<entry><para>Gets the number of rows. See <codeEntityReference qualifyHint="false" autoUpgrade="true">P:Austra.Library.Matrix.Rows</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>trace</codeInline></para></entry>
	    	<entry><para>Gets the sum of the main diagonal. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Trace</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>stats</codeInline></para></entry>
	    	<entry><para>Returns statistics on cells. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Stats</codeEntityReference>.</para></entry>
	  	  </row>
	  	</table>
	  	<para>And these are the supported methods:</para>
		<table>
		  <row>
	    	<entry><para><codeInline>all</codeInline></para></entry>
	    	<entry><para>Checks if all cells satisfy a lambda predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.All(System.Func{System.Double,System.Boolean})</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>any</codeInline></para></entry>
	    	<entry><para>Checks if exists a cell satisfying a lambda predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Any(System.Func{System.Double,System.Boolean})</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>getCol</codeInline></para></entry>
	    	<entry><para>Gets a column by its index. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.GetColumn(System.Int32)</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>getRow</codeInline></para></entry>
	    	<entry><para>Gets a row by its index. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.GetRow(System.Index)</codeEntityReference>.</para></entry>
	  	  </row>
		  <row>
	    	<entry><para><codeInline>map</codeInline></para></entry>
	    	<entry><para>Creates a new matrix with transformed cells. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Matrix.Map(System.Func{System.Double,System.Double})</codeEntityReference>.</para></entry>
	  	  </row>
	  	</table>
	  </content>
    </section>
    <section address="MatrixOperators">
      <title>Matrix operators</title>
      <content>
		<para>These are the operators available for matrices:</para>
		<table>
		  <row>
		    <entry><para><codeInline>+</codeInline></para></entry>
		    <entry><para>Adds two matrices, or a matrix and a scalar.</para></entry>
		  </row>
		  <row>
		    <entry><para><codeInline>-</codeInline></para></entry>
		    <entry><para>Subtracts two matrices, or a matrix and a scalar. It is also used as a unary operator.</para></entry>
		  </row>
		  <row>
		    <entry><para><codeInline>*</codeInline></para></entry>
		    <entry>
		      <para>Matrix * matrix = matrix multiplication.</para>
		      <para>Matrix * number = matrix scale.</para>
		      <para>Matrix * vector = vector transformation.</para>
		      <para>Vector * matrix = vector is transposed and then transformed.</para>
		    </entry>
		  </row>
		  <row>
		    <entry><para><codeInline>.*</codeInline></para></entry>
		    <entry><para>Pointwise multiplication of two matrices.</para></entry>
		  </row>
		  <row>
		    <entry><para><codeInline>./</codeInline></para></entry>
		    <entry><para>Pointwise quotient of two matrices.</para></entry>
		  </row>
		  <row>
		    <entry><para><codeInline>/</codeInline></para></entry>
		    <entry><para>Divides a matrix by a scalar, but also divides either a vector or a matrix by a matrix, for solving linear equations.</para></entry>
		  </row>
		  <row>
		    <entry><para><codeInline>'</codeInline></para></entry>
		    <entry><para>Unary sufix operator for matrix transpose.</para></entry>
		  </row>
		</table>
		<para>This examples shows how to solve linear equations for a vector, using division by a matrix:</para>
		<code language="Austra">
<markup><b>let</b></markup> m = <markup><b><font color="DarkCyan">matrix::</font></b></markup>random(5) + 0.01,
    v = <markup><b><font color="DarkCyan">vec::</font></b></markup>random(5),
    answer = v / m <markup><b>in</b></markup>
    m * answer - v
		</code>
		<para>Solving equations for a matrix is also possible:</para>
		<code language="Austra">
<markup><b>let</b></markup> m = <markup><b><font color="DarkCyan">matrix::</font></b></markup>random(5) + 1;
<markup><b><font color="DarkCyan">matrix::</font></b></markup>eye(5) / m - m.inverse
		</code>
		<para>Internally, the LU factorization of the matrix is used for equation solving, for the general case. When the matrix at the left is a triangular matrix, a most efficient algorithm is used.</para>
      </content>
    </section>
    <section address="MatrixIndexes">
      <title>Indexing and slicing</title>
      <content>
		<para>Individual cells are accessed using the row and column inside brackets:</para>
		<code language="Austra">
mat[0, 0];
mat[mat.rows - 1, mat.cols - 1]
		</code>
		<para>All indexes starts from zero. If the row index is omitted, a whole column is returned:</para>
		<code language="Austra">
mat[, 0]
		</code>
		<para>Omitting the column number yields a whole row:</para>
		<code language="Austra">
mat[0,];
mat[0]
		</code>
		<para>Carets can also be used in any of the two indexes, to count positions from the end. For instance, this expression returns the rightmost lower cell of the matrix:</para>
		<code language="Austra">
mat[^1, ^1]
		</code>
		<para>Columns and rows can also be extracted as vectors using relative indexes:</para>
		<code language="Austra">
mat[, ^2]; <markup><font color="DarkGreen">-- Next to last column.</font></markup>
mat[^2,]   <markup><font color="DarkGreen">-- Next to last row.</font></markup>
		</code>
		<para>Ranges are accepted for both dimensions, and can be combined with indexes too:</para>
		<code language="Austra">
<markup><font color="DarkGreen">-- Remove last row and last column.</font></markup>
mat[0..^1, 0..^1];
<markup><font color="DarkGreen">-- Last row without first and last items.</font></markup>
mat[^1, 1..^1] 
		</code>
      </content>
    </section>
    <section address="evd">
      <title>Eigenvalues Decomposition</title>
      <content>
		<para>An eigenvalue <codeInline>λ</codeInline> and its associated eigenvector <codeInline>ν</codeInline> are any pair of values that satisfy this equation for a square matrix <codeInline>M</codeInline>:</para>
		<para><math>Mν=λv</math></para>
		<para>It means that, when the matrix transforms an eigenvector, the result is the same vector, except for a scale factor.</para>
		<para>The Eigenvalue Decomposition of a matrix is an algorithm that identifies all the pairs of eigenvalues and eigenvector for a given square matrix. You can efficiently find eigenvalues and eigenvectors in AUSTRA applying the <codeInline>evd</codeInline> method on a matrix:</para>
		<code language="Austra">
<markup><b>let</b></markup> m = <markup><b><font color="DarkCyan">matrix::</font></b></markup>random(10);
<markup><b>let</b></markup> e = mat.evd;
<markup><font color="DarkGreen">-- This is a matrix with all eigenvectors as columns.</font></markup>
e.vectors;
<markup><font color="DarkGreen">-- This is a complex vectors with all eigenvalues.</font></markup>
e.values;
<markup><font color="DarkGreen">-- An alternative representation of eigenvalues, using a real matrix.</font></markup>
e.d
		</code>
		<para>A real matrix can have both real and complex eigenvalues, and that is why the values property of the decomposition is a complex vector. When there exists a complex eigenvalue, its complex conjugate is also an eigenvalue of the matrix. Aside from values, the eigenvalues are also returned in a d property, which is a real block diagonal matrix. Each real eigenvalue is placed in the main diagonal, and complex eigenvalues are represented as 2x2 blocks in the diagonal.</para>
		<para>The best way to visualize how evd returns eigenvalues is to show an example. These are the eigenvalues of a 4x4 random matrix:</para>
		<code language="Austra">
> e.values
ans ∊ ℂ(4)
  &lt;2.02631; 0>
  &lt;-0.229546; 0.093745>
  &lt;-0.229546; -0.093745>
  &lt;0.364586; 0>

> e.d
ans ∊ ℝ(4⨯4)
  2.02631          0          0         0
        0  -0.229546   0.093745         0
        0  -0.093745  -0.229546         0
        0          0          0  0.364586
		</code>
		<para>The second and third eigenvalues are a conjugated pair of complex numbers. See how they are represented in the block diagonal matrix, using four cells.</para>
		<para>When <math>m</math> is a square matrix, the following mathematical equivalence must hold:</para>
		<code language="Austra">
m * m.evd.vectors = m.evd.vectors * m.evd.d
		</code>
		<para>In practice, however, we must take the lost of precision into account. For verifying an EVD, you can use this formula in AUSTRA:</para>
		<code language="Austra">
<markup><b>let</b></markup> m = matrix::random(32), e = m.evd <markup><b>in</b></markup>
  (m * e.vectors - e.vectors * e.d).amax &lt;= 1e-12;
<markup><b>let</b></markup> lm = matrix::lrandom(32), m = lm * lm', e = m.evd <markup><b>in</b></markup>
  (m * e.vectors - e.vectors * e.d).amax &lt;= 1e-12;
		</code>
		<para>Symmetric matrices, as the one generated for the second example above, are decomposed using a more efficient algorithm, so Austra checks symmetry first, before applying any of these algorithms.</para>
      </content>
    </section>
    <relatedTopics>
	  <codeEntityReference qualifyHint="false">T:Austra.Library.Matrix</codeEntityReference>
	  <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">Code definitions</link>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
      <link xlink:href="95cad3a9-e319-4787-a66b-596e34e6ddd6">List comprehensions</link>
      <link xlink:href="008dce7e-55cd-4c37-997b-b0463d7c24d0">Splines</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>