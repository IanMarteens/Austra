<?xml version="1.0" encoding="utf-8"?>
<topic id="04ea4168-169f-488a-9250-41bdab54e5e6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>AUSTRA is a small functional language designed to handle financial series and common econometric models. It also implements vectors, matrices and the most frequently used operations from linear algebra, statistics, and probabilities.</para>
      <para>AUSTRA formulas are efficiently parsed by a .NET Engine, and they are translated into fast-running native code that calls routines also implemented in .NET that take advantage of multicore systems and SIMD extensions.</para>
      <para>This topic introduces the basic syntax of the language.</para>
    </introduction>
    <section address="Lexical">
      <title>Lexical syntax</title>
      <content>
      <para>
      The lexical syntax of AUSTRA is very similar to most real programming languages:
      <list>
      	<listItem>White space, including line returns, are completely ignored.</listItem>
      </list>
      </para>
      </content>
    </section>
    <section address="Section1">
      <title>Root objects</title>
      <content>
        <para>Every AUSTRA expression must start with a root object. It could be either a global variable, a local variable, a class method or a class variable.</para>
      </content>
      <sections>
          <section address="SubSection1">
              <title>Global variables</title>
              <content>
                  <para>Global variables come in two flavors: persistent variables and session variables. Persistent variables come mostly from an external source, like a JSON file, a database or an external service. In this AUSTRA version, those persisted variables are always time series, because they have a predictable serialization format. This design decision, of course, may change at some point of the evolution of the library.</para>
                  <para>Session variables, as their name indicates, are defined inside a user session and die with the session.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Class methods and class constants</title>
              <content>
                  <para>Class methods in AUSTRA correspond both to constructors and static methods in traditional OOP languages, like C#.</para>
              </content>
          </section>
      </sections>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>