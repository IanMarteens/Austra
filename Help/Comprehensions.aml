<?xml version="1.0" encoding="utf-8"?>
<topic id="95cad3a9-e319-4787-a66b-596e34e6ddd6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>A <newTerm>list comprehension</newTerm> is a syntactic sugar construct for filtering and mapping <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">sequences</link>, <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">vectors</link> and <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">series</link>. They simplify writing <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">lambda functions</link> for methods, and they are easier to read and understand.</para>
    </introduction>
    <section address="Section1">
      <title>Syntax</title>
      <content>
        <para>Suppose you need to write a formula like this one:</para>
        <code language="Austra">
seq(1, 100).filter(x =&gt; x % 2 = 1).map(x =&gt; x^2)
        </code>
        <para>It is not a candidate for the Turing Award: it takes the squares of all even numbers between 0 and 100. You had to type two lambda functions, including arrows and lambda parameters, and you also had to explicitly mention the <codeInline>filter</codeInline> and the <codeInline>map</codeInline> methods, including the parentheses enclosing their arguments.</para>
        <para>This alternative expression does the same, is shorter to type and easier to read:</para>
        <code language="Austra">
[x &lt;- seq(1, 100) : x % 2 = 1 =&gt; x^2]
        </code>
        <para>Since the source of all numbers is a range sequence, you could also use a simpler expression for the range:</para>
        <code language="Austra">
[x &lt;- 1..100 : x % 2 = 1 =&gt; x^2]
        </code>
        <para>The syntax for this construct can be summarized like this:</para>
        <code language="Austra">
[<markup><i>identifier</i></markup> &lt;- <markup><i>generator</i></markup> : <markup><i>filter</i></markup> =&gt; <markup><i>mapping</i></markup>]
        </code>        
        <para>Both <legacyItalic>filter</legacyItalic> and <legacyItalic>mapping</legacyItalic> are optional:</para>
        <code language="Austra">
<markup><font color="DarkGreen">-- This expression...</font></markup>
[x &lt;- 1..100];
<markup><font color="DarkGreen">-- ... is equivalent to this one:</font></markup>
seq(1, 100)
        </code>
        <sections>
          <section address="compSeries">
            <title>Types in list comprehensions</title>
            <content>
        	  <para>The type assigned to the whole list comprehension expression is the same of its generator. You can keep applying methods or operators to the result:</para>
        	  <code language="Austra">
[x &lt;- 1..100 : x % 2 = 1 =&gt; x^2].sortDesc;
[x &lt;- 1..100] .* ([x &lt;- 1..100] + 1)
        	  </code>
        	  <para>Special care is needed when the generator is a time series, because the identifier in the head of the list comprehension is typed as <codeInline>double</codeInline> in the mapping section, but it is a <codeInline>Point&lt;Date&gt;</codeInline> in the filter section:</para>
        	  <code language="Austra">
<markup><b>let</b></markup> mean = msft.mean <markup><b>in</b></markup>
  [x &lt;- msft : x.date &gt;= jan2015 =&gt; x - mean]
        	  </code>        	  
            </content>
          </section>
          <section address="generators">
            <title>Generators</title>
            <content>
        	  <para>As we have seen, range expressions can be used as generators. We support four variants of range expressions inside list comprehensions:</para>
        	  <code language="Austra">
<markup><font color="DarkGreen">-- Equivalent to iseq(1, 100)</font></markup>
[x &lt;- 1..100];
<markup><font color="DarkGreen">-- Equivalent to seq(1, 100)</font></markup>
[x &lt;- 1.0..100.0];
<markup><font color="DarkGreen">-- Even integers from 0 to 100.</font></markup>
[x &lt;- 0..2..100];
<markup><font color="DarkGreen">-- The same as seq(0, 1024, 2 * pi)).</font></markup>
[x &lt;- 0..1024..2pi];
        	  </code>
        	  <para>In the last example, only the upper bound is real, so the compiler handles the generator as a real sequence.</para>
        	  <para>The parameter identifier and the membership operator can also be drop, and the above examples simplify this way:</para>
        	  <code language="Austra">
[1..100];
[1.0..100.0];
[0..2..100];
[0..1024..2pi];
        	  </code>
        	  <para>We have mostly used constants for the range generators so far but, of course, each part of the generator could be an expression:</para>
        	  <code language="Austra">
[x &lt;- pi - 1..32 * 32..sqrt(200)];
        	  </code>
            </content>
          </section>
        </sections>
      </content>
    </section>
    <section address="Quantifiers">
      <title>Quantifiers in list comprehensions</title>
      <content>
        <para>Logical quantifiers can be used at the beginning of a list comprehension. The allowed quantifiers are <codeInline>all</codeInline> and <codeInline>any</codeInline>, as the corresponding methods in vectors and sequences. They are no keywords, but used at the beginning of a list comprehension, they are considered <newTerm>contextual keywords</newTerm> for syntax highlighting.</para>
        <para>This is a very simple example of a quantifier in a list comprehension expression and its equivalent form using methods:</para>
        <code language="Austra">
[<markup><b>any</b></markup> x &lt;- 10..100 : x * x = x + x];
iseq(10, 100).any(x =&gt; x * x = x + x)
        </code>
        <para>Both expressions are compiled as Boolean expressions. Note that a qualified list comprehension does not allow a mapping section.</para>
        <para>The quantified list comprehension is marginally shorter than a call to <codeInline>any</codeInline> or <codeInline>all</codeInline>. Why, then, do we bother supporting this syntax? The reason is that we can embed a qualified predicate inside a normal list comprehension:</para>
        <code language="Austra">
<markup><font color="DarkGreen">-- Find all prime numbers between 2 and 100:</font></markup>
[x &lt;- 2..100 : <markup><b>all</b></markup> div <markup><b>in</b></markup> 2 .. x - 1 : x % div != 0];
<markup><font color="DarkGreen">-- Equivalent, but longer:</font></markup>
iseq(2, 100).filter(x =&gt; iseq(2, x - 1).all(div => x % div != 0))
        </code>
        <para>We need no inner brackets inside the main list comprehension, since it is evident how the qualified condition is nested. We could even add a mapping at the end of the comprehension to transform the calculated prime numbers, if required.</para>
        <para>If we use regular lambdas, we will be nesting a lambda definition inside another. The generated code for the list comprehension also use nested lambdas, but with an easier to understand syntax. The inner lambda is "capturing" the parameter of the outer lambda, so we must be careful naming local variables.</para>
      </content>
     </section>
    <relatedTopics>
	  <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">Code definitions</link>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
      <link xlink:href="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49">Matrices</link>
      <link xlink:href="008dce7e-55cd-4c37-997b-b0463d7c24d0">Splines</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>