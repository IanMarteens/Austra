<?xml version="1.0" encoding="utf-8"?>
<topic id="95cad3a9-e319-4787-a66b-596e34e6ddd6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>A <newTerm>list comprehension</newTerm> is a syntactic sugar construct for filtering and mapping <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">sequences</link>, <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">vectors</link> and <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">series</link>. They simplify writing <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">lambda functions</link> for methods, and they are easier to read and understand.</para>
    </introduction>
    <section address="Section1">
      <title>Syntax</title>
      <content>
        <para>Suppose you need to write a formula like this one:</para>
        <code language="Austra">
seq(1, 100).filter(x =&gt; x % 2 = 1).map(x =&gt; x^2)
        </code>
        <para>It is not a candidate for the Turing Award: it takes the squares of all even numbers between 0 and 100. You had to type two lambda functions, including arrows and lambda parameters, and you also had to explicitly mention the <codeInline>filter</codeInline> and the <codeInline>map</codeInline> methods, including the parentheses enclosing their arguments.</para>
        <para>This alternative expression does the same, is shorter to type and easier to read:</para>
        <code language="Austra">
[x <markup><b>in</b></markup> seq(1, 100) : x % 2 = 1 =&gt; x^2]
        </code>
        <para>Since the source of all numbers is a range sequence, you could also use a simpler expression for the range:</para>
        <code language="Austra">
[x <markup><b>in</b></markup> 1..100 : x % 2 = 1 =&gt; x^2]
        </code>
        <para>The syntax for this construct can be summarized like this:</para>
        <code language="Austra">
[<markup><i>identifier</i></markup> in <markup><i>generator</i></markup> : <markup><i>filter</i></markup> =&gt; <markup><i>mapping</i></markup>]
        </code>        
        <para>Both <legacyItalic>filter</legacyItalic> and <legacyItalic>mapping</legacyItalic> are optional:</para>
        <code language="Austra">
<markup><font color="DarkGreen">-- This expression...</font></markup>
[x <markup><b>in</b></markup> 1..100];
<markup><font color="DarkGreen">-- ... is equivalent to this one:</font></markup>
seq(1, 100)
        </code>
        <sections>
          <section address="compSeries">
            <title>Types in list comprehensions</title>
            <content>
        	  <para>The type assigned to the whole list comprehension expression is the same of its generator. You can keep applying methods or operators to the result:</para>
        	  <code language="Austra">
[x <markup><b>in</b></markup> 1..100 : x % 2 = 1 =&gt; x^2].sortDesc;
[x <markup><b>in</b></markup> 1..100] .* ([x <markup><b>in</b></markup> 1..100] + 1)
        	  </code>
        	  <para>Special care is needed when the generator is a time series, because the identifier in the head of the list comprehension is typed as <codeInline>double</codeInline> in the mapping section, but it is a <codeInline>Point&lt;Date&gt;</codeInline> in the filter section:</para>
        	  <code language="Austra">
<markup><b>let</b></markup> mean = msft.mean <markup><b>in</b></markup>
  [x <markup><b>in</b></markup> msft : x.date &gt;= jan2015 =&gt; x - mean]
        	  </code>        	  
            </content>
          </section>
        </sections>
      </content>
    </section>
    <relatedTopics>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
      <link xlink:href="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49">Matrices</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>