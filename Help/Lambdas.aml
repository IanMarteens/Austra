<?xml version="1.0" encoding="utf-8"?>
<topic id="9ebcc778-37a1-4313-87f9-1ea37494d2c8" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Lambda functions are inline-defined anonymous functions that can be used as parameters in normal methods and class method calls.</para>
    </introduction>
    <section address="Section1">
      <title>Usage</title>
      <content>
        <para>Series and vectors, for instance, has an <codeInline>all</codeInline> method to check if all their numeric values satisfies an arbitrary condition. The condition is the only parameter of the method, and must be passed as a lambda function. Let's say we have an <codeInline>aapl_prices</codeInline> persistent variable holding a series of prices. We can verify that all those prices are positive using this formula:</para>
        <code language="Austra">
        aapl_prices.all(x => x >= 0)   <markup><font color="DarkGreen">-- It should return <strong>true</strong>.</font></markup>
        </code>
        <para>The above formula checks whether all values in the prices series are non-negative.
That's the role of the all method, which checks that all values in a series satisfies a
given predicate. The way we state the predicate to be satisfied is using this syntax:</para>
        <code language="Austra">
x => x >= 0
        </code>
		<para>This can be read as "given an arbitrary value x, check that it is non-negative". We
can use all for any other purpose, such as checking that all values in a series lie
inside the (0, 1) interval:</para>
        <code language="Austra">
prices.all(value => 0 &lt; value &lt; 1)
		</code>
		<para>Notice that in this new example, we have used another value for the "arbitrary given value".</para>
		<para>This example shows how to use the related method <codeInline>any</codeInline>:</para>
        <code language="Austra">
prices.any(x => x >= 1)
		</code>
		<para>In this case, we are checking whether exists at least one value in prices that is above 1.</para>
		<para>Both <codeInline>any</codeInline> and <codeInline>all</codeInline> require a predicate as argument: a formula that given an arbitrary
value, returns <codeInline>true</codeInline> or <codeInline>false</codeInline>. The <codeInline>map</codeInline> method, instead, requires a more general
function that converts a real value into another one. Let's say we want to limit
values from a series, so that no one is greater than 1000:</para>
        <code language="Austra">
prices.map(x => min(x, 1000))
		</code>
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>