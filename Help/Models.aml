<?xml version="1.0" encoding="utf-8"?>
<topic id="e7993a1e-f2c5-4eb0-aa47-0a3f620375fc" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The <codeInline>model</codeInline> class is a general-purpose container for algorithms that do not fit well as members of other classes. These models are generally shown by the Austra Desktop application as interactive controls, allowing users to explore the whole range of solutions available for each model.</para>
    </introduction>
    <section address="MVO">
      <title>Mean Variance Optimiser</title>
      <content>
        <para>Mean variance optimisation (MVO) is a mathematical optimisation for maximising the expected return of a portfolio given a level of risk. Inside a polytope, the fundamental algorithm is an optimizer for a quadratic objective function. A <legacyItalic>polytope</legacyItalic> is just a fancy name for a polyhedron in a high-dimensional space.</para>
        <para>The MVO is implemented by the <codeEntityReference qualifyHint="false">T:Austra.Library.MVO.MvoModel</codeEntityReference> class from the Austra library, and it is available for the AUSTRA language by executing the <codeInline>model::mvo</codeInline> class method.</para>
        <para>Let us assume we have a portfolio with three assets, and we want to find the three optimal weights, one for each asset. The most general method overload of the MVO would be like this:</para>
        <code language="Austra">
<markup><font color="DarkGreen">-- This example assumes we are dealing with three assets.</font><br/>
<b><font color="DarkCyan">model</font></b></markup>::mvo(
    <markup><font color="DarkGreen">-- A 3D-vector for returns and a 3x3 covariance matrix.</font></markup>
    retVec, covMatrix,
    <markup><font color="DarkGreen">-- Two 3D-vectors for lower and upper bounds.</font></markup>
    [0, 0, 0], [1, 1, 1],
    <markup><font color="DarkGreen">-- A label for easy identification of each asset</font></markup>.
    <markup><font color="DarkRed">"Name1"</font></markup>,
    <markup><font color="DarkRed">"Name2"</font></markup>,
    <markup><font color="DarkRed">"Name3"</font></markup>)
        </code>
        <list class="bullet">
          <listItem>We have purposefully avoided stating any values for the <legacyItalic>retVec</legacyItalic> and <legacyItalic>covMatrix</legacyItalic> variables. These two variables would contain a vector with the expected return of each asset and a covariance matrix for these assets.</listItem>
          <listItem>It is not obvious how expected returns are to be calculated. Financial series are seldom stationary, so the expected return would normally depend on time.</listItem>
          <listItem>The covariance matrix faces a similar problem.</listItem>
          <listItem>The lower and upper bounds, on the contrary, are generally easier to set; they are just the minimum and maximum weights we desire for each asset in the portfolio.</listItem>
          <listItem>The MVO algorithm automatically adds another condition for the weights: their sum must be equal to one.</listItem>
        </list>
        <para>For the sake of the example, we are going to assume an arbitrary rentability for each of our three hypothetical assets. For the covariance matrix, we will make things more interesting by creating a fake matrix with three of our series examples: <codeInline>aaa</codeInline>, <codeInline>aab</codeInline> and <codeInline>aad</codeInline>:</para>
        <code language="Austra">
> matrix::cov(aaa, aab, aad)
ans ∊ ℝ(3⨯3)
 589666   525180  19023.8
 525180   553027  16232.4
19023.8  16232.4  42045.1
        </code>
        <para>The main diagonal of the above matrix tells us how volatile each of our assets is. We can see that <codeInline>aaa</codeInline> has the greater variance and that <codeInline>aad</codeInline> has the lesser variance and, consequently, the lower associated risk. So, we will assume that the first asset provides the better return, followed by the second and third assets:</para>
        <code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::mvo(
    [1, 0.8, 0.6],
    <markup><b><font color="DarkCyan">matrix</font></b></markup>::cov(aaa, aab, aac),
    [0, 0, 0], [1, 1, 1],
    <markup><font color="DarkRed">"Name1"</font></markup>, <markup><font color="DarkRed">"Name2"</font></markup>, <markup><font color="DarkRed">"Name3"</font></markup>)
        </code>
        <para>If we execute this code, we will get the following interactive output in the area with results from the Austra Desktop application:</para>
		<mediaLink><image placement="near" xlink:href="mark001"/></mediaLink>
		<para>The first part of the output is a table enumerating portfolios from the so-called efficient frontier. There are four such portfolios in our example. The first portfolio maximises the expected return, but it is also the one with more volatility, or risk. This portfolio only includes the first asset; the weight for this asset is one, and the rest of the weights are zero. The last listed portfolio is the one with the lesser vola-tility and return, and it is a mix of the second and third assets. Each portfolio in-cludes a value for the lambda column, which mathematically is the value of the Lagrange multiplier for this solution. From the business point of view, lambda is an indicator of the associated risk.</para>
		<para>Portfolios in the efficient frontier are important because they represent turning points in the strategy for changing asset weights. Any portfolio interpolated from two portfolios on the efficient frontier is a viable solution to our problem. And that is the mission of the three sliders on the left side of the charts: you can select ei-ther a desired return, a standard deviation, or a variance, and the charts will show you which weights are needed for the selected portfolio. This is what we get if we choose an expected return of approximately 0.8:</para>
		<mediaLink><image placement="near" xlink:href="mark002"/></mediaLink>
		<para>The required portfolio must be a combination of 59% from the first asset and another 41% from the third asset.</para>
		<sections>
		  <section>
		    <title>More class method overloads</title>
		    <content>
			  <para>For our example, we chose arbitrary names for the assets that compose our portfolio. When these assets are related to series in our session, it is easier to use the name of the series for this task:</para>
        	  <code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::mvo(
    [1, 0.8, 0.6],
    <markup><b><font color="DarkCyan">matrix</font></b></markup>::cov(aaa, aab, aac),
    [0, 0, 0], [1, 1, 1],
    aaa, aab, aad)
        	  </code>
			  <para>Now, the series variables are mentioned twice in the formula. We could change the formula this way:</para>
        	  <code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::mvo(
    [1, 0.8, 0.6],
    aaa, aab, aad)
        	  </code>
			  <para>This is the simplest method overload for the MVO. Note that we have also removed the lower and upper bounds, making the natural assumption that all weights will stay in the [0,1] interval. We still need, however, to explicitly state the expected returns, but Austra infers that we want to use the covariance matrix for the three used series.</para>
		    </content>
		  </section>
		  <section>
		    <title>Additional constraints</title>
		    <content>
			  <para>Optimization problems frequently include additional constraints beyond the simple limits we have shown so far. As a matter of fact, since we have not included a constraint for the total sum of weights, the <codeInline>model::mvo</codeInline> method has automatically added this constraint to the problem:</para>
			  <mediaLink><image placement="near" xlink:href="mark004"/></mediaLink> 
	  		  <para>Let’s say we want another constraint. For instance, the first asset’s weight must always be greater or equal to the third asset's weight:</para>
			  <mediaLink><image placement="near" xlink:href="mark005"/></mediaLink> 
		  	  <para>The most general form for this kind of constraint is a list of equations following this pattern:</para>
			  <mediaLink><image placement="near" xlink:href="mark006"/></mediaLink> 
			  <para>Here, <math>l</math> stands for left side and <math>r</math> means right side. That strange symbol <codeInline>⋈</codeInline> only means that we can substitute it either with an equality or an inequality. So, more generally, our additional constraints could always be written as:</para>
			  <mediaLink><image placement="near" xlink:href="mark007"/></mediaLink> 
			  <para><math>L</math> is a matrix with as many columns as assets in the problem and an arbitrary number of rows, <math>r</math> is a vector with the same number of items as rows in the left-side matrix. Still, we must find a way to determine which relational operator must be used for each of the constraints.</para>
			  <para>The <codeEntityReference qualifyHint="false">T:Austra.Library.MVO.MvoModel</codeEntityReference> class provides an overloaded method for adding constraints to an already existing model:</para>
        	  <code language="Austra">
mvoModel.setConstraints(lhsMatrix, rhsVector, opsIntVector)
        	  </code>
			  <para>The first parameter must be a matrix; the second parameter must be a real vector; and the third parameter must be an integer vector. Items in the third parameter are interpreted according to their signs. A positive value means a greater or equal operation; a negative value stands for a lesser or equal relationship; and zero means equality. The third parameter can be omitted when all constraints are equality constraints.</para>
			  <para>This way, if we want to combine the sum-of-weights constraint with our additional constraint, we will need the following code:</para>
        	  <code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::mvo(
    [1, 0.8, 0.6],
    aaa, aab, aad).setConstraints(
        [1, 1, 1; 1, 0, -1], [1, 0], [<b>int</b>:0, 1])
        	  </code>
		<para>These are the portfolios from the efficient frontier, with the additional constraint:</para>
		<mediaLink><image placement="near" xlink:href="mark003"/></mediaLink> 
		<para>We could even drop the first constraint because the optimiser will add it when it is not present:</para>
        	  <code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::mvo(
    [1, 0.8, 0.6],
    aaa, aab, aad).setConstraints(
        [1; 0; -1]’, [0], [<b>int</b>:1])
        	  </code>
			  <para>Please note the trick we need to create a matrix literal with only one row; we wrote it as a one-column matrix and then transposed it. This is a valid alternative:</para>
        	  <code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::mvo(
    [1, 0.8, 0.6],
    aaa, aab, aad).setConstraints(
        <markup><b><font color="DarkCyan">matrix</font></b></markup>::rows([1, 0, -1]), [0], [<b>int</b>:1])
        	  </code>
		    </content>
		  </section>
		</sections>
      </content>
    </section>
    <section address="Simplex">
      <title>Linear Programming</title>
      <content>
		<para>The <codeInline>model</codeInline> class also provides a <codeInline>simplex</codeInline> method for solving linear programming problems. In a typical linear programming problem, we must maximize the value of a linear function like this:</para>
	    <mediaLink><image placement="near" xlink:href="simplex001"/></mediaLink> 
		<para>All variables are implicitly considered non-negative, and some additional constraints must be satisfied:</para>
	    <mediaLink><image placement="near" xlink:href="simplex002"/></mediaLink> 
		<para>This problem can be solved using this code:</para>
       	<code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::simplex([40, 30], [1, 1; 2, 1], [12, 16], [<b>int</b>: -1, -1])
       	</code>
		<para>The first parameter contains the coefficients from the objective function. The second parameter is a matrix with the left-hand side coefficients of the constraints, and the third parameter is the right-hand side of the constraint as a vector. Finally, the last parameter contains the relational operators for each constraint. Since all constraints have the same sign, we can simplify the code like this:</para>
       	<code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::simplex([40, 30], [1, 1; 2, 1], [12, 16], -1)
      	</code>
		<para>In both cases, the answer is a <codeEntityReference qualifyHint="false">T:Austra.Library.MVO.SimplexModel</codeEntityReference> object that contains the optimal value and the coefficients for the optimal solution:</para>
       	<code language="Austra">
> model::simplex([40, 30], [1, 1; 2, 1], [12, 16], [int: -1, -1])
LP Model (2 variables)
Value: 400
Weights:
  4    8
      	</code>
		<para>This method always assumes that we want to maximize the value of the objective function. If you want to minimize the objective function, you could invert the sign of the coefficients:</para>
       	<code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::simplex(-[12, 16], [1, 2; 1, 1], [40, 30], +1)
      	</code>
		<para>Note, however, that doing by this, you will get a negated value for the solution.</para>
       	<code language="Austra">
LP Model (2 variables)
Value: -400
Weights:
 20   10  
      	</code>
		<para>You can fix this problem by using <codeInline>simplexMin</codeInline> instead and using the original coefficients in the objective function:</para>
       	<code language="Austra">
<markup><b><font color="DarkCyan">model</font></b></markup>::simplexMin([12, 16], [1, 2; 1, 1], [40, 30], +1)
      	</code>
      </content>
    </section>
    <relatedTopics>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Primitive types</link>
	  <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">Code definitions</link>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
      <link xlink:href="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49">Matrices</link>
      <link xlink:href="95cad3a9-e319-4787-a66b-596e34e6ddd6">List comprehensions</link>
      <link xlink:href="008dce7e-55cd-4c37-997b-b0463d7c24d0">Splines</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>