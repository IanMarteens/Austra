<?xml version="1.0" encoding="utf-8"?>
<topic id="90cb2899-abcf-4ebe-b96a-8cfac1b2809f" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Code definitions are formulas saved for future use. They are saved and loaded from any persistent storage used by AUSTRA. You can define either parameter-less definitions, that act like macros, or parametric definitions, which are the equivalent of user-defined functions.</para>
    </introduction>
    <section address="Section1">
      <title>Creating definitions</title>
      <content>
        <para>Definitions are created using the <codeInline>def</codeInline> statement:</para>
        <code language="Austra">
		<markup><b>def</b></markup> cxMvo = <markup><b><font color="DarkCyan">model::</font></b></markup>mvo(sm_ret, sm_cov, sm_low, sm_high)
        </code>
        <para>A description can be associated to a definition using the following syntax:</para>
        <code language="Austra">
		<markup><b>def</b></markup> cxMvo:"MVO Model" = <markup><b><font color="DarkCyan">model::</font></b></markup>mvo(sm_ret, sm_cov, sm_low, sm_high)
        </code>
        <para>Removing an existing definition is achieved with the <codeInline>undef</codeInline> command:</para>
        <code language="Austra">
		<markup><b>undef</b></markup> cxMvo
        </code>
        <para>In the AUSTRA desktop application, definitions appear in the <legacyBold>Variables</legacyBold> panel, inside a <legacyBold>Definitions</legacyBold> node:</para>
        <mediaLink>
			<image placement="near" xlink:href="d001"/>
		</mediaLink>
      </content>
      <sections>
      	<section address="noVars">
      	  <title>Definitions cannot use session variables</title>
      	  <content>
      	  <para>Code definitions must respect some limitations. The most important one is that they cannot reference session variables. This sequence of commands is invalid:</para>
      	  <code language="Austra">
<markup><b>set</b></markup> vector = [1, 2, 3, 4];
<markup><b>def</b></markup> fact4 = vector.product <markup><font color="DarkGreen">-- Invalid code definition.</font></markup>
      	  </code>
      	  <para>The reason behind this constraint is that session variables only store their current values, but not the formula that generated that value.</para>
      	  </content>
      	</section>
      	<section address="recDef">
      	  <title>Definitions may use existing definitions</title>
      	  <content>
      	  <para>A code definition may refer to an existing definition. For instance:</para>
      	  <code language="Austra">
<markup><b>def</b></markup> sm_cov = <markup><b><font color="DarkCyan">matrix::</font></b></markup>covariance(aapl, msft, hog, dax);
<markup><b>def</b></markup> sm_ret = [1, 0.9, 1.2, 0.8];
<markup><b>def</b></markup> cxMvo = <markup><b><font color="DarkCyan">model::</font></b></markup>mvo(sm_ret, sm_cov, vec(4), <markup><b><font color="DarkCyan">vec::</font></b></markup>ones(4))
      	  </code>
      	  <para>In this case, removing either <codeInline>sm_cov</codeInline> or <codeInline>sm_ret</codeInline>, would also remove <codeInline>cxMvo</codeInline>.</para>
      	  </content>
      	</section>
      	<section address="determinism">
      	  <title>Deterministic callings</title>
      	  <content>
      	  <para>Let's say we make this definition:</para>
      	  <code language="Austra">
<markup><b>def</b></markup> extProduct = <markup><b><font color="DarkCyan">vec::</font></b></markup>random(4) ^ <markup><b><font color="DarkCyan">vec::</font></b></markup>random(4)
      	  </code>
      	  <para>This definition calls twice a class method that creates a random vector. The caret operator, <codeInline>^</codeInline>, combines those two vectors in a 4x4 matrix. Executing these definitions two times in a row gives, as expected, different results:</para>
      	  <code language="Austra">
&gt; extProduct
ans ∊ ℝ(4⨯4)
0.416065  0.493621  0.412334  0.0249965
0.390261  0.463007  0.386762  0.0234462
0.377909  0.448353   0.37452  0.0227041
 0.49103   0.58256  0.486626  0.0295002

&gt; extProduct
ans ∊ ℝ(4⨯4)
0.0251534  0.0182728  0.0452763  0.00933612
0.0374942  0.0272379    0.06749   0.0139167
0.0555746  0.0403725   0.100035   0.0206275
0.0256057  0.0186015  0.0460906  0.00950403
      	  </code>
      	  <para>That is the expected behaviour. However, this could be inconvenient to test properties of the result. For instance, we could want to check the determinant of the product, or that a double transpose works fine:</para>
      	  <code language="Austra">
extProduct = expProduct''; <markup><font color="DarkGreen">-- Double transpose.</font></markup>
(extProduct * extProduct).det - extProduct.det^2
      	  </code>
      	  <para>AUSTRA assumes that, inside a formula, all parameter-less definitions call must return the same value. For that purpose, the two above formulas are internally rewritten as:</para>
      	  <code language="Austra">
<markup><b>let</b></markup> x = extProduct <markup><b>in</b></markup> x = x'';
<markup><b>let</b></markup> x = extProduct <markup><b>in</b></markup> (x * x).det - x.det ^ 2
      	  </code>
          <para>A <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">local variable</link> is created under the hood for evaluating the definition just once inside the current formula.</para>
      	  <para>This automatic caching only takes place for parameterless definitions. If you want to disable this behaviour, just add an exclamation sign right after the definition identifier, when using the definition:</para>
      	  <code language="Austra">
<markup><font color="DarkGreen">-- This first expression returns <b>true</b>.</font></markup>
extProduct = extProduct;
<markup><font color="DarkGreen">-- This second expression returns <b>false</b>.</font></markup>
extProduct = extProduct!;
<markup><font color="DarkGreen">-- This expression also returns <b>false</b>.</font></markup>
extProduct! = extProduct
      	  </code>
      	  </content>
      	</section>
      </sections>
    </section>
   	<section address="functions">
   	  <title>Function definitions</title>
   	  <content>
      	<para>A definition can also have parameters, for defining a function. For instance, the factorial of an integer can be defined this way:</para>
      	<code language="Austra">
<markup><b>def</b></markup> fact(n: <markup><b>int</b></markup>) = iff(n &lt;= 1, 1, [2..n].prod)
      	</code>
      	<para>The above definition is non recursive. Recursive functions must declare their return type:</para>
      	<code language="Austra">
<markup><b>def</b></markup> recFact(n: <markup><b>int</b></markup>): <markup><b>int</b></markup> =
    <markup><b>if</b></markup> n &lt;= 1 <markup><b>then</b></markup> 1 <markup><b>else</b></markup> n * recFact(n - 1)
      	</code>
      	<para>You can use local variables when defining a function:</para>
        <code language="Austra">
<markup><b>def</b></markup> mcd(a, b: <markup><b>int</b></markup>): <markup><b>int</b></markup> =
    <markup><b>let</b></markup> m = a % b <markup><b>in</b></markup> iff(m = 0, b, mcd(b, m))
        </code>
      	<para>And you can also define auxiliary functions inside a function definition:</para>
        <code language="Austra">
<markup><b>def</b></markup> fact(n: <markup><b>int</b></markup>) =
    <markup><b>let</b></markup> f(n, acc: <markup><b>int</b></markup>): <markup><b>int</b></markup> = iff(n &lt;= 1, acc, f(n - 1, n * acc)) <markup><b>in</b></markup>
        f(n, 1)
        </code>
      	<para>In this case,  the inner function <codeInline>f</codeInline> is the one that is directly recursive. The outer function does not need to declare its return type.</para>
      	<sections>
      	  <section address="funtionsDesc">
      	    <title>Describing function definitions</title>
      	    <content>
      		  <para>A permanent description can be attached to a function definition using the same syntax as before:</para>
      	      <code language="Austra">
<markup><b>def</b></markup> fact:"Iterative factorial"(n: <markup><b>int</b></markup>) =
    iff(n &lt;= 1, 1, [2..n].prod)
      	      </code>
      		  <para>The description will be serialized and saved in whichever data storage Austra uses.</para>
      	    </content>
      	  </section>
      	  <section>
      	    <title>Type names in AUSTRA</title>
      	    <content>
      		  <para>These are the types that can be explicitly used for parameters and return types in function definitions:</para>
			  <table>
	 		    <row>
	 		      <entry><para><codeInline>bool</codeInline></para></entry>
	 		      <entry><para>The logical data type.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>int</codeInline></para></entry>
	 		      <entry><para>32-bit integers.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>long</codeInline></para></entry>
	 		      <entry><para>64-bit integers.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>real</codeInline></para></entry>
	 		      <entry><para>Double precision reals.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>date</codeInline></para></entry>
	 		      <entry><para>Austra dates.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>string</codeInline></para></entry>
	 		      <entry><para>Strings.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>complex</codeInline></para></entry>
	 		      <entry><para>Double precision complex values.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>series</codeInline></para></entry>
	 		      <entry><para>Time series.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>matrix</codeInline></para></entry>
	 		      <entry><para>Dense double precision matrices.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>vec</codeInline>, <codeInline>cvec</codeInline>, <codeInline>ivec</codeInline></para></entry>
	 		      <entry><para>Real, complex, and integer vectors.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>seq</codeInline>, <codeInline>cseq</codeInline>, <codeInline>iseq</codeInline></para></entry>
	 		      <entry><para>Real, complex, and integer sequences.</para></entry>
			    </row>
			  </table>
      		  <para>Arrays can be specified adding two brackets after a type name. Function types follows this convention:</para>
      	      <code language="Austra">
<markup><font color="DarkGreen">-- A function that receives a real and returns a real:</font><br/>
<b>real</b></markup> => <markup><b>real</b><br/>
<font color="DarkGreen">-- Receives an integer and a vector, and returns a real:</font><br/>
<b>int</b></markup> => <markup><b>vec</b></markup> => <markup><b>real</b></markup>
      	      </code>
      		  <para>For instance, this definition allows to apply a function twice to an argument:</para>
      	      <code language="Austra">
<markup><b>def</b></markup> twice(x: <markup><b>real</b></markup>, f: <markup><b>real</b></markup> => <markup><b>real</b></markup>) =
    f(f(x))
      	      </code>
      		  <para>This function can be called like this:</para>
      	      <code language="Austra">
twice(1, sin)
      	      </code>

     	    </content>
      	  </section>
      	</sections>
      </content>
    </section>
    <relatedTopics>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Primitive types</link>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
      <link xlink:href="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49">Matrices</link>
      <link xlink:href="95cad3a9-e319-4787-a66b-596e34e6ddd6">List comprehensions</link>
      <link xlink:href="008dce7e-55cd-4c37-997b-b0463d7c24d0">Splines</link>
      <link xlink:href="e7993a1e-f2c5-4eb0-aa47-0a3f620375fc">Models</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>