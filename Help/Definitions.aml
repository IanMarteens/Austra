<?xml version="1.0" encoding="utf-8"?>
<topic id="90cb2899-abcf-4ebe-b96a-8cfac1b2809f" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Code definitions are formulas saved for future use. They are saved and loaded from any persistent storage used by AUSTRA. In this version, parameterized definitions are not yet allowed, but they are planned for the next version of the language.</para>
    </introduction>
    <section address="Section1">
      <title>Creating definitions</title>
      <content>
        <para>Definitions are created using the <codeInline>def</codeInline> statement:</para>
        <code language="Austra">
		<markup><b>def</b></markup> cxMvo = model::mvo(sm_ret, sm_cov, sm_low, sm_high)
        </code>
        <para>A description can be associated to a definition using the following syntax:</para>
        <code language="Austra">
		<markup><b>def</b></markup> cxMvo:"MVO Model" = model::mvo(sm_ret, sm_cov, sm_low, sm_high)
        </code>
        <para>Removing an existing definition is achieved with the <codeInline>undef</codeInline> command:</para>
        <code language="Austra">
		<markup><b>undef</b></markup> cxMvo
        </code>
      </content>
      <sections>
      	<section address="noVars">
      	  <title>Definitions cannot use session variables</title>
      	  <content>
      	  <para>Code definitions must respect some limitations. The most important one is that they cannot reference session variables. This sequence of commands is invalid:</para>
      	  <code language="Austra">
<markup><b>set</b></markup> vec = [1, 2, 3, 4];
<markup><b>def</b></markup> fact4 = vec.products <markup><font color="DarkGreen">-- Invalid code definition.</font></markup>
      	  </code>
      	  <para>The reason behind this constraint is that session variables only store their current values, but not the formula that generated that value.</para>
      	  </content>
      	</section>
      	<section address="recDef">
      	  <title>Definitions may use existing definitions</title>
      	  <content>
      	  <para>A code definition may refer to an existing definition. For instance:</para>
      	  <code language="Austra">
<markup><b>def</b></markup> sm_cov = matrix::covariance(aapl, msft, hog, dax);
<markup><b>def</b></markup> sm_ret = [1, 0.9, 1.2, 0.8];
<markup><b>def</b></markup> cxMvo = model::mvo(sm_ret, sm_cov, vec(4), vec::ones(4))
      	  </code>
      	  <para>In this case, removing either <codeInline>sm_cov</codeInline> or <codeInline>sm_ret</codeInline>, would also remove <codeInline>cxMvo</codeInline>.</para>
      	  </content>
      	</section>
      	<section address="determinism">
      	  <title>Deterministic callings</title>
      	  <content>
      	  <para>Let's say we make this definition:</para>
      	  <code language="Austra">
<markup><b>def</b></markup> extProduct = vec::random(4) ^ vec::random(4)
      	  </code>
      	  <para>This definition calls twice a class method that creates a random vector. The caret operator, <codeInline>^</codeInline>, combines those two vectors in a 4x4 matrix. Executing this definitions two times in a row gives, as expected, different results:</para>
      	  <code language="Austra">
&gt; extProduct
ans ∊ ℝ(4⨯4)
0.416065  0.493621  0.412334  0.0249965
0.390261  0.463007  0.386762  0.0234462
0.377909  0.448353   0.37452  0.0227041
 0.49103   0.58256  0.486626  0.0295002

&gt; extProduct
ans ∊ ℝ(4⨯4)
0.0251534  0.0182728  0.0452763  0.00933612
0.0374942  0.0272379    0.06749   0.0139167
0.0555746  0.0403725   0.100035   0.0206275
0.0256057  0.0186015  0.0460906  0.00950403
      	  </code>
      	  <para>That is the expected behavior. However, this could be inconvenient to test properties of the result. For instance, we could want to check the determinant of the product, or that a double transpose works fine:</para>
      	  <code language="Austra">
extProduct = expProduct''; <markup><font color="DarkGreen">-- Double transpose.</font></markup>
(extProduct * extProduct).det - extProduct.det^2
      	  </code>
      	  <para>AUSTRA assumes that, inside a formula, all parameterless definitions call must return the same value. For that purpose, the two above formulas are internally rewritten as:</para>
      	  <code language="Austra">
<markup><b>let</b></markup> x = extProduct <markup><b>in</b></markup> x = x'';
<markup><b>let</b></markup> x = extProduct <markup><b>in</b></markup> (x * x).det - x.det ^ 2
      	  </code>
          <para>A <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">local variable</link> is created under the hood for evaluating the definition just once inside the current formula.</para>
      	  <para>This automatic caching only takes place for parameterless definitions. If you want to disable this behavior, just add an exclamation sign right after the definition identifier, when using the definition:</para>
      	  <code language="Austra">
<markup><font color="DarkGreen">-- This first expression returns <b>true</b>.</font></markup>
extProduct = extProduct;
<markup><font color="DarkGreen">-- This second expression returns <b>false</b>.</font></markup>
extProduct = extProduct!;
<markup><font color="DarkGreen">-- This expression also returns <b>false</b>.</font></markup>
extProduct! = extProduct
      	  </code>
      	  </content>
      	</section>
      </sections>
    </section>
    <relatedTopics>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
      <link xlink:href="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49">Matrices</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>