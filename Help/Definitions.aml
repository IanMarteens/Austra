<?xml version="1.0" encoding="utf-8"?>
<topic id="90cb2899-abcf-4ebe-b96a-8cfac1b2809f" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Code definitions are formulas saved for future use. They are saved and loaded from any persistent storage used by AUSTRA. In this version, parameterized definitions are not yet allowed, but they are planned for the next version of the language.</para>
    </introduction>
    <section address="Section1">
      <title>Definitions</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Definitions are created using the <codeInline>def</codeInline> statement:</para>
        <code language="Austra">
		def cxMvo = model::mvo(sm_ret, sm_cov, sm_low, sm_high)
        </code>
        <para>A description can be associated to a definition using the following syntax:</para>
        <code language="Austra">
		def cxMvo:"MVO Model" = model::mvo(sm_ret, sm_cov, sm_low, sm_high)
        </code>
        <para>Removing an existing definition is achieved with the <codeInline>undef</codeInline> command:</para>
        <code language="Austra">
		undef cxMvo
        </code>
      </content>
      <sections>
      	<section>
      	  <title>Definitions cannot use session variables</title>
      	  <content>
      	  <para>Code definitions must respect some limitations. The most important one is that they cannot reference session variables. This sequence of commands is invalid:</para>
      	  <code language="Austra">
      	  set vec = [1, 2, 3, 4]
      	  def fact4 = vec.products <markup><font color="DarkGreen">-- Invalid code definition.</font></markup>
      	  </code>
      	  <para>The reason behind this constraint is that session variables only store their current values, but not the formula that generated that value.</para>
      	  </content>
      	</section>
      	<section>
      	  <title>Definitions may use existing definitions</title>
      	  <content>
      	  <para>A code definition may refer to an existing definition. For instance:</para>
      	  <code language="Austra">
def sm_cov = matrix::covariance(aapl, msft, hog, dax)
def sm_ret = [1, 0.9, 1.2, 0.8]
def cxMvo = model::mvo(sm_ret, sm_cov, vector(4), vector::ones(4))
      	  </code>
      	  <para>In this case, removing either <codeInline>sm_cov</codeInline> or <codeInline>sm_ret</codeInline>, would also remove <codeInline>cxMvo</codeInline>.</para>
      	  </content>
      	</section>
      	<section>
      	  <title>Deterministic callings</title>
      	  <content>
      	  <para>Let's say we make this definition:</para>
      	  <code language="Austra">
def extProduct = vector::random(4) ^ vector::random(4)
      	  </code>
      	  <para>This definition calls twice a class method that creates a random vector. The caret operator, <codeInline>^</codeInline>, combines those two vectors in a 4x4 matrix.</para>
      	  </content>
      	</section>
      </sections>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>