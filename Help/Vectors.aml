<?xml version="1.0" encoding="utf-8"?>
<topic id="aae4328b-9ead-40dc-b407-54e8d0614cd5" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>AUSTRA provides double-precision vectors, identified by the class <codeInline>vec</codeInline>, and complex double-precision vectors, <codeInline>cvec</codeInline>. Both data types are implemented using dense storage.</para>
    </introduction>
    <section address="Section1">
      <title>Real vectors</title>
      <content>
        <para>A vector is constructed by listing its components inside brackets:</para>
        <code language="Austra">
[1, 2, 3, 4]
		</code>
		<para>Commas are optional, so they can be omitted:</para>
        <code language="Austra">
[1 2 3 4]
		</code>
		<para>These class methods are available for creating vectors:</para>
		<table>
 		  <row>
 		    <entry><para><codeInline>vec::new</codeInline></para></entry>
 		    <entry><para>Overloaded constructor (see below).</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>vec::ones</codeInline></para></entry>
 		    <entry><para>Creates a vector filled with ones.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>vec::random</codeInline></para></entry>
 		    <entry><para>Creates a vector with random values from a uniform distribution.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>vec::nrandom</codeInline></para></entry>
 		    <entry><para>Creates a vector with random values from a normal standard distribution.</para></entry>
		  </row>
		</table>
		<para>These are the overloads supported by <codeInline>vec::new</codeInline>:</para>
        <code language="Austra">
<markup><font color="DarkGreen">-- Creates a vector with 10 items, all of them zeros.</font></markup>
vec::new(10);
<markup><font color="DarkGreen">-- Remember that ::new can be omitted!</font></markup>
vec(10));
<markup><font color="DarkGreen">-- Creates a vector like [1 2 3 4 5 6 7 8 9 10]</font></markup>
vec(10, i => i + 1)
		</code>
		<para>The last example shows how to create a vector using a <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">lambda function</link> parameter. This is a more sophisticated example of using a lambda to initialize items in a vector:</para>
        <code language="Austra">
<markup><font color="DarkGreen">-- Mimics a periodic function.</font></markup>
vec(1024, i => sin(i*pi/512) + 0.8*cos(i*pi/256))
		</code>
        <para><codeInline>vec::new</codeInline> can also be used to create a linear combination of vectors:</para>
        <code language="Austra">
vec([0.5, 0.1, 0.7, 0.2], v1, v2, v3)
		</code>
		<para>The first parameter contains weights, and the remaining parameters are the vectors that will be linearly combined. If there is an extra value in the weights, as in the example, it is used as an independent term. The above expression is equivalent to this one:</para>
        <code language="Austra">
0.5 + 0.1 * v1 + 0.7 * v2 + 0.2 * v3
		</code>
		<para>Please note that the parser can detect some code patterns and optimize expressions automatically. For instance, for vectors, the parser recognizes these patterns:</para>
        <code language="Austra">
			vector1 * scalar + vector2;
			scalar * vector1 + vector2;
			scalar1 * vector1 + scalar2 * vector2;
		</code>
		<para>Both these expressions are reduced to calls to one of the overloads of the method <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Vector.MultiplyAdd(Austra.Library.Vector,Austra.Library.Vector)</codeEntityReference>. These methods are internally optimized to use a single temporary buffer, instead of the two buffers of a naïve implementation, and both of them use FMA fused operations when available. Of course, the method underlying the above presented <codeInline>vec::new</codeInline> constructor is even better optimized and runs several faster than even the optimized versions of lineal composition.</para>
		<sections>
		  <section>
		    <title>Vector properties</title>
		    <content>
		      <para>These are the properties supported by a vector instance:</para>
			<table>
 		  	  <row>
 		    	<entry><para><codeInline>abs</codeInline></para></entry>
 		    	<entry><para>Gets a new vector with absolute values. See <see cref="M:Austra.Library.Vector.Abs" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>acf</codeInline></para></entry>
 		    	<entry><para>The AutoCorrelation Function. See <see cref="M:Austra.Library.Vector.ACF" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>amax</codeInline></para></entry>
 		    	<entry><para>Gets the maximum of the absolute values. See <see cref="M:Austra.Library.Vector.AMax" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>amin</codeInline></para></entry>
 		    	<entry><para>Gets the minimum of the absolute values. See <see cref="M:Austra.Library.Vector.AMin" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>distinct</codeInline></para></entry>
 		    	<entry><para>Gets a new vector with the unique values from the original one. See <see cref="M:Austra.Library.Vector.Distinct" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>fft</codeInline></para></entry>
 		    	<entry><para>Gets the Fast Fourier Transform of the values. See <see cref="M:Austra.Library.Vector.Fft" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>first</codeInline></para></entry>
 		    	<entry><para>Gets the first item in the vector. See <see cref="P:Austra.Library.Vector.First" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>last</codeInline></para></entry>
 		    	<entry><para>Gets the last item in the vector. See <see cref="P:Austra.Library.Vector.Last" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>length</codeInline></para></entry>
 		    	<entry><para>Gets the number of values in the vector. See <see cref="P:Austra.Library.Vector.Length" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>max</codeInline></para></entry>
 		    	<entry><para>Get the maximum value from the vector. See <see cref="M:Austra.Library.Vector.Maximum" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>mean</codeInline></para></entry>
 		    	<entry><para>Gets the average of the values in the vector. See <see cref="M:Austra.Library.Vector.Mean" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>min</codeInline></para></entry>
 		    	<entry><para>Get the minimum value from the vector. See <see cref="M:Austra.Library.Vector.Minimum" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>norm</codeInline></para></entry>
 		    	<entry><para></para>Gets the Pythagorean norm of the vector. See <see cref="M:Austra.Library.Vector.Norm" />.</entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>plot</codeInline></para></entry>
 		    	<entry><para>Shows the vector in a chart. See <see cref="M:Austra.Library.Vector.Plot" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>prod</codeInline></para></entry>
 		    	<entry><para>Multiplies all items in the vector. See <see cref="M:Austra.Library.Vector.Product" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>reverse</codeInline></para></entry>
 		    	<entry><para>Creates a new vector with items in reverse order. See <see cref="M:Austra.Library.Vector.Reverse" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>sort</codeInline></para></entry>
 		    	<entry><para>Gets a new vector with its items sorted. See <see cref="M:Austra.Library.Vector.Sort" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>sqr</codeInline></para></entry>
 		    	<entry><para>Gets the scalar product of the vector with itself. See <see cref="M:Austra.Library.Vector.Squared" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>sqrt</codeInline></para></entry>
 		    	<entry><para>Gets a new vector with the square root of each item. See <see cref="M:Austra.Library.Vector.Sqrt" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>stats</codeInline></para></entry>
 		    	<entry><para>Gets all statistics in one call. See <see cref="M:Austra.Library.Vector.Stats" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>sum</codeInline></para></entry>
 		    	<entry><para>Gets the sum of all values. See <see cref="M:Austra.Library.Vector.Sum" />.</para></entry>
		  	  </row>
			</table>
			</content>
		  </section>
		  <section>
		    <title>Vector methods</title>
		    <content>
		      <para>These are the methods supported by a vector instance:</para>
			<table>
 		  	  <row>
 		    	<entry><para><codeInline>all</codeInline></para></entry>
 		    	<entry><para>Checks if all items satisfy a lambda predicate. See <see cref="M:Austra.Library.Vector.All(System.Func{System.Double,System.Boolean})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>any</codeInline></para></entry>
 		    	<entry><para>Checks if exists an item satisfying a lambda predicate. See <see cref="M:Austra.Library.Vector.Any(System.Func{System.Double,System.Boolean})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>ar</codeInline></para></entry>
 		    	<entry><para>Gets the autoregression coefficients for a given <codeInline>p</codeInline>. See <see cref="M:Austra.Library.Vector.AutoRegression(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>arModel</codeInline></para></entry>
 		    	<entry><para>Creates a full AR(p) model. See <see cref="M:Austra.Library.Vector.ARModel(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>autocorr</codeInline></para></entry>
 		    	<entry><para>Gets the autocorrelation given a lag. See <see cref="M:Austra.Library.Vector.AutoCorrelation(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>correlogram</codeInline></para></entry>
 		    	<entry><para>Gets all autocorrelations up to a given lag. See <see cref="M:Austra.Library.Vector.Correlogram(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>filter</codeInline></para></entry>
 		    	<entry><para>Filters items by value. See <see cref="M:Austra.Library.Vector.Filter(System.Func{System.Double,System.Boolean})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>indexOf</codeInline></para></entry>
 		    	<entry><para>Returns the first index where a value is stored. See <see cref="M:Austra.Library.Vector.IndexOf(System.Double)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>linear</codeInline></para></entry>
 		    	<entry><para>Gets the regression coefficients given a list of vectors. See <see cref="M:Austra.Library.Vector.LinearModel(Austra.Library.Vector[])" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>linearModel</codeInline></para></entry>
 		    	<entry><para>Creates a full linear model from a list of vectors. See <see cref="M:Austra.Library.Vector.FullLinearModel(Austra.Library.Vector[])" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>map</codeInline></para></entry>
 		    	<entry><para>Pointwise transformation of the items in a vector. See <see cref="M:Austra.Library.Vector.Map(System.Func{System.Double,System.Double})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>reduce</codeInline></para></entry>
 		    	<entry><para>Reduces all items in a vector to a single value. See <see cref="M:Austra.Library.Vector.Reduce(System.Double,System.Func{System.Double,System.Double,System.Double})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>zip</codeInline></para></entry>
 		    	<entry><para></para>Combines two vectors using a lambda function. See <see cref="M:Austra.Library.Vector.Zip(Austra.Library.Vector,System.Func{System.Double,System.Double,System.Double})" />.</entry>
		  	  </row>
			</table>
			</content>
		  </section>
		</sections>
      </content>
    </section>
    <section>
      <title>Complex vectors</title>
      <content>
		<para>There's no special syntax for complex vector literals, but complex vectors can be easily created using the <codeInline>cvec::new</codeInline> class method and one or two vector constructors:</para>
        <code language="Austra">
cvec::new([1 2 3 4], [4 3 2 1]);
<markup><font color="DarkGreen">-- ::new can be omitted.</font></markup>
cvec([1 2 3 4], [4 3 2 1])
		</code>
		<para>These class methods are available for creating complex vectors:</para>
		<table>
 		  <row>
 		      <entry><para><codeInline>cvec::new</codeInline></para></entry>
			  <entry><para>Overloaded constructor (see below).</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>cvec::random</codeInline></para></entry>
 		    <entry><para>Creates a complex vector with random values from a uniform distribution.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>cvec::nrandom</codeInline></para></entry>
 		    <entry><para>Creates a complex vector with random values from a normal standard distribution.</para></entry>
		  </row>
		</table>
		<para>These are the overloads supported by <codeInline>cvec::new</codeInline>:</para>
        <code language="Austra">
<markup><font color="DarkGreen">-- Creates a complex vector with 10 zeros.</font></markup>
cvec(10);
<markup><font color="DarkGreen">-- Creates a complex vector from one real vector.</font></markup>
cvec([1, 2, 3]);
<markup><font color="DarkGreen">-- Creates a complex vector from two real vectors.</font></markup>
cvec([1, 2, 3], [3, 2, 1]);
<markup><font color="DarkGreen">-- Creates a complex vector with a lambda function.</font></markup>
cvec(10, i => polar(2π*i/10));
<markup><font color="DarkGreen">-- The lambda function includes access to the complex vector.</font></markup>
cvec(100, (i, v) => polar(2π*i/10) - 0.01 * i * v{i-1})
	    </code>
	    <sections>
		  <section>
		    <title>Complex vector properties</title>
		    <content>
		      <para>These are the properties supported by a complex vector instance:</para>
			<table>
 		  	  <row>
 		    	<entry><para><codeInline>amax</codeInline></para></entry>
 		    	<entry><para>Gets the maximum of the absolute values. See <see cref="M:Austra.Library.ComplexVector.AbsMax" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>amin</codeInline></para></entry>
 		    	<entry><para>Gets the minimum of the absolute values. See <see cref="M:Austra.Library.ComplexVector.AbsMin" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>distinct</codeInline></para></entry>
 		    	<entry><para>Gets a new vector with the unique values from the original one. See <see cref="M:Austra.Library.ComplexVector.Distinct" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>fft</codeInline></para></entry>
 		    	<entry><para>Gets the Fast Fourier Transform of the values. See <see cref="M:Austra.Library.ComplexVector.Fft" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>first</codeInline></para></entry>
 		    	<entry><para>Gets the first item in the vector. See <see cref="P:Austra.Library.ComplexVector.First" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>imag</codeInline></para></entry>
 		    	<entry><para>Gets the imaginary components as a vector. See <see cref="P:Austra.Library.ComplexVector.Imaginary" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>last</codeInline></para></entry>
 		    	<entry><para>Gets the last item in the vector. See <see cref="P:Austra.Library.ComplexVector.Last" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>length</codeInline></para></entry>
 		    	<entry><para>Gets the number of values in the vector. See <see cref="P:Austra.Library.ComplexVector.Length" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>magnitudes</codeInline></para></entry>
 		    	<entry><para>Gets magnitudes as a vector. See <see cref="M:Austra.Library.ComplexVector.Magnitudes" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>mean</codeInline></para></entry>
 		    	<entry><para>Gets the average of the values in the vector. See <see cref="M:Austra.Library.ComplexVector.Mean" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>norm</codeInline></para></entry>
 		    	<entry><para></para>Gets the Pythagorean norm of the vector. See <see cref="M:Austra.Library.ComplexVector.Norm" />.</entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>phases</codeInline></para></entry>
 		    	<entry><para></para>Gets phases as a vector. See <see cref="M:Austra.Library.ComplexVector.Phases" />.</entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>plot</codeInline></para></entry>
 		    	<entry><para>Shows the vector in a chart. See <see cref="M:Austra.Library.ComplexVector.Plot" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>real</codeInline></para></entry>
 		    	<entry><para>Gets the real components as a vector. See <see cref="P:Austra.Library.ComplexVector.Real" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>reverse</codeInline></para></entry>
 		    	<entry><para>Creates a new vector with items in reverse order. See <see cref="M:Austra.Library.ComplexVector.Reverse" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>sqr</codeInline></para></entry>
 		    	<entry><para>Gets the scalar product of the vector with itself. See <see cref="M:Austra.Library.ComplexVector.Squared" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>sum</codeInline></para></entry>
 		    	<entry><para>Gets the sum of all values. See <see cref="M:Austra.Library.ComplexVector.Sum" />.</para></entry>
		  	  </row>
			</table>
			</content>
		  </section>
		  	<section>
		      <title>Complex vector methods</title>
		    	<content>
		      	  <para>These are the methods supported by a complex vector instance:</para>
				  <table>
 		  	  		<row>
 		    		  <entry><para><codeInline>all</codeInline></para></entry>
 		    		  <entry><para>Checks if all items satisfy a lambda predicate. See <see cref="M:Austra.Library.ComplexVector.All(System.Func{System.Numerics.Complex,System.Boolean})" />.</para></entry>
		  	  		</row>
 		  	  		<row>
 		    		  <entry><para><codeInline>any</codeInline></para></entry>
 		    		  <entry><para>Checks if exists an item satisfying a lambda predicate. See <see cref="M:Austra.Library.ComplexVector.Any(System.Func{System.Numerics.Complex,System.Boolean})" />.</para></entry>
		  	  		</row>
 		  	  		<row>
 		    		  <entry><para><codeInline>filter</codeInline></para></entry>
 		    		  <entry><para>Filters items by value. See <see cref="M:Austra.Library.ComplexVector.Filter(System.Func{System.Numerics.Complex,System.Boolean})" />.</para></entry>
		  	  		</row>
 		  	  		<row>
 		    		  <entry><para><codeInline>indexOf</codeInline></para></entry>
 		    		  <entry><para>Returns the first index where a value is stored. See <see cref="M:Austra.Library.ComplexVector.IndexOf(System.Numerics.Complex)" />.</para></entry>
		  	  		</row>
 		  	  		<row>
 		    		  <entry><para><codeInline>map</codeInline></para></entry>
 		    		  <entry><para>Pointwise transformation of the items in a vector. See <see cref="M:Austra.Library.ComplexVector.Map(System.Func{System.Numerics.Complex,System.Numerics.Complex})" />.</para></entry>
		  	  		</row>
 		  	  		<row>
 		    		  <entry><para><codeInline>mapReal</codeInline></para></entry>
 		    		  <entry><para>Pointwise transformation of the items in a vector. Returns a real vector. See <see cref="M:Austra.Library.ComplexVector.MapReal(System.Func{System.Numerics.Complex,System.Double})" />.</para></entry>
		  	  		</row>
 		  	  		<row>
 		    		  <entry><para><codeInline>reduce</codeInline></para></entry>
 		    		  <entry><para>Reduces all items in a vector to a single value. See <see cref="M:Austra.Library.ComplexVector.Reduce(System.Numerics.Complex,System.Func{System.Numerics.Complex,System.Numerics.Complex,System.Numerics.Complex})" />.</para></entry>
		  	  		</row>
 		  	  		<row>
 		    		  <entry><para><codeInline>zip</codeInline></para></entry>
 		    		  <entry><para></para>Combines two vectors using a lambda function. See <see cref="M:Austra.Library.ComplexVector.Zip(Austra.Library.ComplexVector,System.Func{System.Numerics.Complex,System.Numerics.Complex,System.Numerics.Complex})" />.</entry>
		  	  		</row>
				  </table>
			</content>
		  </section>
	    </sections>
	  </content>
    </section>
    <relatedTopics>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>