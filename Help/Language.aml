<?xml version="1.0" encoding="utf-8"?>
<topic id="04ea4168-169f-488a-9250-41bdab54e5e6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>AUSTRA is a small functional language designed to handle financial series and common econometric models. It also implements vectors, matrices and the most frequently used operations from linear algebra, statistics, and probabilities.</para>
      <para>AUSTRA formulas are efficiently parsed by a .NET Engine, and they are translated into fast-running native code that calls routines also implemented in .NET that take advantage of multicore systems and SIMD extensions.</para>
      <para>This topic introduces the basic syntax of the language.</para>
    </introduction>
    <section address="Lexical">
      <title>Lexical syntax</title>
      <content>
      <para>
      The lexical syntax of AUSTRA is very similar to most programming languages:
      <list class="bullet">
      	<listItem>White space, including line returns, are completely ignored.</listItem>
      	<listItem>Identifiers and keywords are key insensitive.</listItem>
      	<listItem>Unicode characters are allowed in identifiers. So, yes: <codeInline>τ = 2*π</codeInline> is a valid expression. Of course, <codeInline>pi</codeInline> is also allowed, and the code editor helps while typing Greek characters.</listItem>
      </list>
      </para>
      </content>
      <sections>
      	<section>
      	  <title>Numeric literals</title>
      	  <content>
			<para>Integer and real numbers are represented as in most programming languages. Here are some examples:</para>
			<code language="Austra">
			2023
			1.0
			-0.1E-16
			</code>
 			<para>Number literals can be suffixed with a lower-case i to represent an imaginary value:</para>
			<code language="Austra">
			2.0i
			-3i
			</code>
			<para>The identifier <codeInline>i</codeInline>, by its own, represents the imaginary unit:</para>
			<code language="Austra">
			1-3i = 1 - 3 * i
			</code>
			<para>Complex numbers can also be created using the <codeInline>complex</codeInline> function:</para>
			<code language="Austra">
			complex(1, -3) = 1 - 3 * i
			complex(3) = 3 + 0i
			</code>
			<para>Since <codeInline>i</codeInline> is not a keyword, you must be careful because it can be redefined as a user variable.</para>
			<para>Complex can also be built using the polar notation:</para>
			<code language="Austra">
			polar(1, pi/2) <markup><font color="DarkGreen">-- Another way to write the imaginary unit.</font></markup>
			</code>
      	  </content>
      	</section>
      	<section>
      		<title>String literals</title>
      		<content>
      		  <para>String literals are enclosed by double quotes, and cannot cross line boundaries.</para>
			  <code language="Austra">
			  "A simple string literal"
			  "A string literal with a quote: ""Wow!"". That was the quote."
			  </code>
      		</content>
      	</section>
      	<section>
      		<title>Date literals</title>
      		<content>
      		  <para>Date literals come in two flavours. A simple literal only includes the month and year, assuming the first day of the month:</para>
			  <code language="Austra">
			  jan20
			  jul2021
			  </code>
			  <para>Two-digit years are first interpreted as a year inside the XXI century. If the resulting date is more than 20 years ahead, 100 years are subtracted to that date. For instance:</para>
			  <code language="Austra">
			  jan20 <markup><font color="DarkGreen">-- January 1st, 2020</font></markup>
			  may42 <markup><font color="DarkGreen">-- May 1st, 1942</font></markup>
			  </code>
			  <para>A day can be added using this syntax:</para>
			  <code language="Austra">
			  6@jan20
			  31@jul2021
			  </code>
      		</content>
      	</section>
      	<section>
      	  <title>Comments</title>
      	  <content>
			<para>Though we do not expect anyone to write hundreds of pages of AUSTRA script, we still support line comments for better documentation. Comments always starts with two consecutive hyphens and extends to the next line feed or the end of the expression, whatever comes first:</para>
			<code language="Austra">
			<markup><font color="DarkGreen">-- A verbose version of math::min()</font></markup>
if aapl.mean &lt; msft.mean then aapl.mean <markup><font color="DarkGreen">-- Another comment.</font></markup>
else msft.mean
			</code>
      	  </content>
      	</section>
      </sections>
    </section>
    <section address="Section1">
      <title>Root objects</title>
      <content>
        <para>Every AUSTRA expression must start with a root object. It could be either a global variable, a local variable, a class method, a class variable, or a <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">code definition</link>.</para>
      </content>
      <sections>
          <section address="SubSection1">
              <title>Global variables</title>
              <content>
                  <para>Global variables come in two flavors: persistent variables and session variables. Persistent variables come mostly from an external source, like a JSON file, a database or an external service. In this AUSTRA version, those persisted variables are always time series, because they have a predictable serialization format. This design decision, of course, may change at some point of the evolution of the library.</para>
                  <para>Session variables, as their name indicates, are defined inside a user session and die with the session.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Class methods and class constants</title>
              <content>
                  <para>Class methods in AUSTRA correspond both to constructors and static methods in traditional OOP languages, like C#.</para>
                  <para>Let's start with some variables:</para>
                  <code language="Austra">
                  i = math::i
                  e = math::e
                  pi = math::pi and pi = math::π
                  </code>
                  <para>Actually, the same equivalence is valid for what we normally would consider "global functions":</para>
                  <code language="Austra">
                  exp(π*i)
                  math::exp(math::pi * math::i)
                  </code>
                  <para>Those global functions and constants are considered as belonging to the <codeInline>math</codeInline> for avoiding problems if any of these simbols is redefined as a persistent or session variable.</para>
                  <para>Of course, there are more classes than <codeInline>math</codeInline>, and we can use their class methods for creating new objects:</para>
                  <code language="Austra">
                  matrix::random(10)
                  vector::new(10)
                  vector(10)
                  </code>
                  <para>As the last example shows, when you call a <codeInline>new</codeInline> method on a class, you can omit the <codeInline>::new</codeInline> part and use just the class name as synonym.</para>
              </content>
          </section>
      </sections>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>