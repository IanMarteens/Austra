<?xml version="1.0" encoding="utf-8"?>
<topic id="8b381718-bf08-4762-a51b-1516af27bef2" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>AUSTRA is a functional language, so it has a functional technique for declaring what in a procedural language would be temporal or local variables.</para>
    </introduction>
    <section address="Section1">
      <title>LET clauses</title>
      <content>
        <para>The functional technique for declaring local variables in a formula is the <legacyBold>let</legacyBold> clause.</para>
        <code language="Austra">
<markup><b>let</b></markup> m = <markup><b><font color="DarkCyan">matrix::</font></b></markup>lrandom(5),
    m1 = m * m',
    c = m1.chol <markup><b>in</b></markup>
    (c * c' - m1).aMax
        </code>
        <para>In the above example, a lower triangular random matrix is computed, and it is
multiplied by its transpose. Then, the Cholesky transform is calculated and finally
we check that the transform is valid, evaluating the absolute maximum of the
matrix difference.</para>
		<para>The <codeInline>m</codeInline>, <codeInline>m1</codeInline> and <codeInline>c</codeInline> variables only exist while the formula is being evaluated.
		As the example shows, each variable defined in the <codeInline>let</codeInline> clause can use any of the previously declared variables in the same clause.
		</para>
      </content>
    </section>
    <section address="Section2">
      <title>Script-scoped LET clauses</title>
      <content>
        <para>When writing several statements in a script, <codeInline>let/in</codeInline> clauses are valid only for the statement they precede, but not for other statements:</para>
        <code language="Austra">
<markup><b>let</b></markup> m = <markup><b><font color="DarkCyan">matrix::</font></b></markup>lrandom(5),
    m1 = m * m',
    c = m1.chol <markup><b>in</b></markup>
    (c * c' - m1).aMax;
<markup><font color="DarkGreen">-- The next statement cannot use "m".</font></markup>
m
        </code>
        <para>If you need a local variable to be available for all statements that follow in a script, you must use a variant of <codeInline>let</codeInline> which does not terminates with an <codeInline>in</codeInline> keyword, but with a semicolon:</para>
        <code language="Austra">
<markup><b>let</b></markup> m = <markup><b><font color="DarkCyan">matrix::</font></b></markup>lrandom(5);
<markup><font color="DarkGreen">-- Now, "m" is available for the rest of the script.</font><br/></markup>
<markup><b>let</b></markup> m1 = m * m',
    c = m1.chol <markup><b>in</b></markup>
    (c * c' - m1).aMax;
<markup><font color="DarkGreen">-- The next statement is valid.</font></markup>
m
        </code>
		<alert class="note">
			<para>Some functional languages, as Haskell, feature another construct for abstracting sub-expressions. Haskell, for instance, offers both <legacyBold>let</legacyBold> and <legacyBold>where</legacyBold>. <legacyBold>let</legacyBold> is located before the expressions that make use of it, and <legacyBold>where</legacyBold> comes after the main expression.</para>
			<para>In AUSTRA, we prefer <codeInline>let</codeInline>, for the sake of Code Completion. So far, I cannot think of any use for <legacyBold>where</legacyBold> that cannot be solved better with <codeInline>let</codeInline>.</para>
		</alert>
      </content>
    </section>
    <section address="Section3">
      <title>Local function definitions</title>
      <content>
        <para>Functions can be defined in <codeInline>let</codeInline> clauses. For instance:</para>
        <code language="Austra">
<markup><b>let</b></markup> mcd(a, b: <markup><b>int</b></markup>): <markup><b>int</b></markup> = <markup><b>if</b></markup> a % b = 0 <markup><b>then</b></markup> b <markup><b>else</b></markup> mcd(b, a % b) <markup><b>in</b></markup>
    mcd(80, 140)
        </code>
        <para>In the above example, the function is defined in a <codeInline>let</codeInline>/<codeInline>in</codeInline> clause, but it could also be defined as a script-scoped local function.</para>
		<alert class="note">
			<para>Since <codeInline>mcd</codeInline> is recursive, its return type must be declared in the function header.</para>
		</alert>
		<para>Function definitions may have their own local variables, as in this variant of the above example:</para>
        <code language="Austra">
<markup><b>let</b></markup> mcd(a, b: <markup><b>int</b></markup>): <markup><b>int</b></markup> =
    <markup><b>let</b></markup> m = a % b <markup><b>in</b></markup> iff(m = 0, b, mcd(b, m)) <markup><b>in</b></markup>
        mcd(80, 140)
        </code>
        <para>This way, we save one evaluation of the remainder.</para>
        <para>Local functions may also be declared inside other functions. For instance, this code defines a function for the factorial, but uses an intermediate function that can be evaluated using tail recursion, for efficiency:</para>
        <code language="Austra">
<markup><b>let</b></markup> fact(n: <markup><b>int</b></markup>) =
    <markup><b>let</b></markup> f(n, acc: <markup><b>int</b></markup>): <markup><b>int</b></markup> = iff(n &lt;= 1, acc, f(n - 1, n * acc)) <markup><b>in</b></markup>
        f(n, 1);
fact(10);
        </code>
        <para>Please note that the <codeInline>in</codeInline> keyword applies to the right-side of the definition of <codeInline>factorial</codeInline>. The <codeInline>let</codeInline> clause that defines <codeInline>factorial</codeInline>, on the contrary, is a script-level clause, with no associated <codeInline>in</codeInline>.</para>
      </content>
    </section>
    <relatedTopics>
	  <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">Code definitions</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
      <link xlink:href="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49">Matrices</link>
      <link xlink:href="95cad3a9-e319-4787-a66b-596e34e6ddd6">List comprehensions</link>
      <link xlink:href="008dce7e-55cd-4c37-997b-b0463d7c24d0">Splines</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>