<?xml version="1.0" encoding="utf-8"?>
<topic id="1800e13a-baf2-48f8-aefa-746082fe23df" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The most important data type in AUSTRA is the <newTerm>time series</newTerm>: a sorted collection of pairs date/value.</para>
    </introduction>
    <section address="Section1">
      <title>Time series come from external sources</title>
      <content>
        <para>Since time series represents data from the real world, most of the times, time series come from persistent variables, that can be stored in an external file or database, and may be periodically updated, either by AUSTRA or by another process.</para>
      </content>
      <sections>
        <section>
          <title>Additional information in series</title>
          <content>
            <para>Since one of the goals of AUSTRA is to deal with financial time series, there is a number of optional properties that can be stored in a series:</para>
            <definitionTable>
			  <definedTerm>Name</definedTerm>
			  <definition><para>The name of the series is the name that is used by the parser to locate a series. For this reason, the series' name must be a valid identifier.</para></definition>
			  <definedTerm>Ticker</definedTerm>
			  <definition><para>However, it's frequent for series to be identified by traders by their tickers, which is the name assigned by the provider of the series. A ticker is not necessarily a valid identifier, so we provide two different fields, one for the name and the second for a ticker. Tickers can be empty.</para></definition>
			  <definedTerm><codeEntityReference qualifyHint="false">T:Austra.Library.Frequency</codeEntityReference></definedTerm>
			  <definition><para>Each series has an associated frequency, which can be daily, weekly, biweekly, monthly, bimonthly, quarterly, semestral, yearly, or undefined. The library, at run time, checks that both operands in a binary operation have always the same frequency.</para></definition>
			  <definedTerm><codeEntityReference qualifyHint="false">T:Austra.Library.SeriesType</codeEntityReference></definedTerm>
			  <definition><para>In addition, each series has a type that can be either <codeInline>Raw</codeInline>, <codeInline>Rets</codeInline>, <codeInline>Logs</codeInline>, <codeInline>MixedRets</codeInline>, or <codeInline>Mixed</codeInline>.</para></definition>
            </definitionTable>
          </content>
        </section>
        <section>
          <title>Series versus vectors</title>
          <content>
            <para><link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vector</link> operations check, at run time, that the operands have the same length. The
same behaviour would be hard to enforce for series. On one hand, each series can
have a different first available date. On the other hand, even series with the same
frequency could have reported values at different days of the week or the month,
and still, it could be interesting to mix them.</para>
			<para>So, the rules for mixing two series in an operation are:</para>
			<list class="bullet">
			  <listItem><para>They must have the same frequency, and their frequencies are checked at runtime.</para></listItem>
			  <listItem><para>However, they may have different lengths. If this is the case, the shorter length is chosen for the result.</para></listItem>
			  <listItem><para>The points of the series are aligned according to their most recent points.</para></listItem>
			  <listItem><para>The list of dates assigned to the result series is chosen arbitrarily from the first operand.</para></listItem>
			</list>
          </content>
        </section>
        <section>
          <title>Class methods</title>
          <content>
            <para>There is only one constructor for series:</para>
			<table>
 		  	  <row>
 		    	<entry><para><codeInline>series::new</codeInline></para></entry>
 		    	<entry><para>Creates a linear combination of series.</para></entry>
		  	  </row>
			</table>
			<para>The first parameter of <codeInline>series::new</codeInline> must be a vector of weights, and from that point on, a list of series must be included. This class method creates a linear combination of series. The length of the weights
vector can be equal to the number of series or the number of series plus one. For instance:</para>
			<code language="Austra">
series([0.1, 0.9], aapl, msft);
<markup><font color="DarkGreen">-- The above code is equivalent to this:</font></markup>
0.1 * aapl + 0.9 * msft
			</code>
			<para>If we add another item to the vector, it will act as an independent term:</para>
			<code language="Austra">
series([0.5, 0.1, 0.9], aapl, msft);
<markup><font color="DarkGreen">-- The above code is equivalent to this:</font></markup>
0.5 + 0.1 * aapl + 0.9 * msft
			</code>
          </content>
        </section>
        <section>
          <title>Series properties</title>
          <content>
            <para>These properties are applied to instances of series:</para>
			<table>
 		  	  <row>
 		    	<entry><para><codeInline>acf</codeInline></para></entry>
 		    	<entry><para>The AutoCorrelation Function. See <see cref="M:Austra.Library.Series`1.ACF" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>amax</codeInline></para></entry>
 		    	<entry><para>Gets the maximum of the absolute values. See <see cref="M:Austra.Library.Series`1.AbsMax" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>amin</codeInline></para></entry>
 		    	<entry><para>Gets the minimum of the absolute values. See <see cref="M:Austra.Library.Series`1.AbsMin" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>count</codeInline></para></entry>
 		    	<entry><para>Gets the number of values in the series. See <see cref="P:Austra.Library.Series`1.Count" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>fft</codeInline></para></entry>
 		    	<entry><para>Gets the Fast Fourier Transform of the values. See <see cref="M:Austra.Library.Series`1.Fft" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>first</codeInline></para></entry>
 		    	<entry><para>Gets the first point in the series (the oldest one). See <see cref="P:Austra.Library.Series`1.First" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>fit</codeInline></para></entry>
 		    	<entry><para>Gets a vector with two coefficients for a linear fit. See <see cref="M:Austra.Library.Series.Fit" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>kurt</codeInline></para></entry>
 		    	<entry><para>Get the kurtosis. See <see cref="P:Austra.Library.Series`1.Kurtosis" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>kurtp</codeInline></para></entry>
 		    	<entry><para>Get the kurtosis of the population. See <see cref="P:Austra.Library.Series`1.PopulationKurtosis" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>last</codeInline></para></entry>
 		    	<entry><para>Gets the last point in the series (the newest one). See <see cref="P:Austra.Library.Series`1.Last" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>linearFit</codeInline></para></entry>
 		    	<entry><para>Gets a line fitting the original series. See <see cref="M:Austra.Library.Series.LinearFit" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>logs</codeInline></para></entry>
 		    	<entry><para>Gets the logarithmic returns. See <see cref="M:Austra.Library.Series.AsLogReturns" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>max</codeInline></para></entry>
 		    	<entry><para>Get the maximum value from the series. See <see cref="P:Austra.Library.Series`1.Maximum" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>mean</codeInline></para></entry>
 		    	<entry><para>Gets the average of the values. See <see cref="P:Austra.Library.Series`1.Mean" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>min</codeInline></para></entry>
 		    	<entry><para>Get the minimum value from the series. See <see cref="P:Austra.Library.Series`1.Minimum" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>movingRet</codeInline></para></entry>
 		    	<entry><para></para>Gets the moving monthly/yearly return. See <see cref="M:Austra.Library.Series.MovingRet" />.</entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>ncdf</codeInline></para></entry>
 		    	<entry><para>Gets the percentile of the last value. See <see cref="M:Austra.Library.Series`1.NCdf" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>perc</codeInline></para></entry>
 		    	<entry><para>Gets the percentiles of the series. See <see cref="M:Austra.Library.Series`1.Percentiles" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>random</codeInline></para></entry>
 		    	<entry><para>Creates a random series from a normal distribution. See <see cref="M:Austra.Library.Series.Random" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>rets</codeInline></para></entry>
 		    	<entry><para>Gets the linear returns. See <see cref="M:Austra.Library.Series.AsReturns" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>skew</codeInline></para></entry>
 		    	<entry><para>Gets the skewness. See <see cref="P:Austra.Library.Series`1.Skewness" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>skewp</codeInline></para></entry>
 		    	<entry><para>Gets the skewness of the population. See <see cref="P:Austra.Library.Series`1.PopulationSkewness" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>stats</codeInline></para></entry>
 		    	<entry><para>Gets all statistics in one call. See <see cref="P:Austra.Library.Series`1.Stats" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>std</codeInline></para></entry>
 		    	<entry><para>Gets the standard deviation. See <see cref="P:Austra.Library.Series`1.StandardDeviation" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>stdp</codeInline></para></entry>
 		    	<entry><para>Gets the standard deviation of the population. See <see cref="P:Austra.Library.Series`1.PopulationStandardDeviation" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>sum</codeInline></para></entry>
 		    	<entry><para>Gets the sum of all values. See <see cref="M:Austra.Library.Series`1.Sum" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>type</codeInline></para></entry>
 		    	<entry><para>Gets the type of the series. See <see cref="P:Austra.Library.Series`1.Type" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>var</codeInline></para></entry>
 		    	<entry><para>Gets the variance. See <see cref="P:Austra.Library.Series`1.Variance" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>varp</codeInline></para></entry>
 		    	<entry><para>Gets the variance of the population. See <see cref="P:Austra.Library.Series`1.PopulationVariance" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>values</codeInline></para></entry>
 		    	<entry><para>Gets the underlying vector of values. See <see cref="P:Austra.Library.Series`1.Values" />.</para></entry>
		  	  </row>
			</table>
          </content>
        </section>
        <section>
          <title>Series methods</title>
          <content>
            <para>These are the methods supported by time series:</para>
			<table>
 		  	  <row>
 		    	<entry><para><codeInline>all</codeInline></para></entry>
 		    	<entry><para>Checks if all items satisfy a lambda predicate. See <see cref="M:Austra.Library.Series.All(System.Func{System.Double,System.Boolean})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>any</codeInline></para></entry>
 		    	<entry><para>Checks if exists an item satisfying a lambda predicate. See <see cref="M:Austra.Library.Series.Any(System.Func{System.Double,System.Boolean})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>ar</codeInline></para></entry>
 		    	<entry><para>Calculates the autoregression coefficients for a given order. See <see cref="M:Austra.Library.Series`1.AutoRegression(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>arModel</codeInline></para></entry>
 		    	<entry><para>Creates a full AR(p) model. See <see cref="M:Austra.Library.Series.ARModel(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>autocorr</codeInline></para></entry>
 		    	<entry><para>Gets the autocorrelation given a lag. See <see cref="M:Austra.Library.Series`1.AutoCorrelation(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>corr</codeInline></para></entry>
 		    	<entry><para>Gets the correlation with a series given as a parameter. See <see cref="M:Austra.Library.Series`1.Correlation(Austra.Library.Series{`0})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>correlogram</codeInline></para></entry>
 		    	<entry><para>Gets all autocorrelations up to a given lag. See <see cref="M:Austra.Library.Series`1.Correlogram(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>cov</codeInline></para></entry>
 		    	<entry><para>Gets the covariance with another given series. See <see cref="M:Austra.Library.Series`1.Covariance(Austra.Library.Series{`0})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>ewma</codeInline></para></entry>
 		    	<entry><para>Calculates an Exponentially Weighted Moving Average. See <see cref="M:Austra.Library.Series.EWMA(System.Double)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>filter</codeInline></para></entry>
 		    	<entry><para>Filters points by values or dates. See <see cref="M:Austra.Library.Series.Filter(System.Func{Austra.Library.Point{Austra.Library.Dates.Date},System.Boolean})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>indexOf</codeInline></para></entry>
 		    	<entry><para>Returns the index where a value is stored. See <see cref="M:Austra.Library.Series`1.IndexOf(System.Double)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>linear</codeInline></para></entry>
 		    	<entry><para>Gets the regression coefficients given a list of series. See <see cref="M:Austra.Library.Series`1.LinearModel(Austra.Library.Series[])" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>linearModel</codeInline></para></entry>
 		    	<entry><para>Creates a full linear model given a list of series. See <see cref="M:Austra.Library.Series.FullLinearModel(Austra.Library.Series[])" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>map</codeInline></para></entry>
 		    	<entry><para>Pointwise transformation of the series with a lambda. See <see cref="M:Austra.Library.Series.Map(System.Func{System.Double,System.Double})" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>movingAvg</codeInline></para></entry>
 		    	<entry><para>Calculates a Simple Moving Average. See <see cref="M:Austra.Library.Series.MovingAvg(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>movingNcdf</codeInline></para></entry>
 		    	<entry><para>Calculates a Moving Normal Percentile. See <see cref="M:Austra.Library.Series.MovingNcdf(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>movingStd</codeInline></para></entry>
 		    	<entry><para>Calculates a Moving Standard Deviation. See <see cref="M:Austra.Library.Series.MovingStd(System.Int32)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>ncdf</codeInline></para></entry>
 		    	<entry><para>Gets the normal percentil for a given value. See <see cref="M:Austra.Library.Series`1.NCdf(System.Double)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>stats</codeInline></para></entry>
 		    	<entry><para>Gets monthly statistics for a given date. See <see cref="M:Austra.Library.Series.GetSliceStats(Austra.Library.Dates.Date)" />.</para></entry>
		  	  </row>
 		  	  <row>
 		    	<entry><para><codeInline>zip</codeInline></para></entry>
 		    	<entry><para>Combines two series using a lambda function. See <see cref="M:Austra.Library.Series.Zip(Austra.Library.Series,System.Func{System.Double,System.Double,System.Double})" />.</para></entry>
		  	  </row>
			</table>
          </content>
        </section>
      </sections>
    </section>
    <relatedTopics>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Arithmetic</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="d1757dd1-7bbd-4d90-88b9-cc034c5ad326">Sequences</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>