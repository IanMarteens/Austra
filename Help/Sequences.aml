<?xml version="1.0" encoding="utf-8"?>
<topic id="d1757dd1-7bbd-4d90-88b9-cc034c5ad326" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Sequences provides most of the operations from real and complex vectors, but avoiding the storage. Sequences are similar to enumerable types in C# with LINQ, and are a requisite for any functional language.</para>
    </introduction>
    <section address="Section1">
      <title>Sequences as light vectors</title>
      <content>
        <para>Let's say we want to calculate factorials. AUSTRA is a functional language, so we don't have explicit loops. We could, however, do this with a vector:</para>
        <code language="Austra">
        vector(10, i => i + 1).prod
        </code>
        <para>The above code works fine, but it forces the library to allocate one array of ten items. This is the alternative, using a sequence:</para>
        <code language="Austra">
        seq(1, 10).prod
        </code>
        <para>Since the sequence's values are generated only by demand, there's no need for the internal storage.</para>
      </content>
      <sections>
          <section address="SubSection1">
              <title>Sequence constructors</title>
              <content>
                  <para>This code fragment shows some of the available constructors for sequences:</para>
		          <code language="Austra">
seq(1, 10)       <markup><font color="DarkGreen">-- Numbers from 1 to 10.</font></markup>
seq(10, 1)       <markup><font color="DarkGreen">-- The inverted sequence.</font></markup>
seq::new(1, 10)  <markup><font color="DarkGreen">-- ::new was omitted before.</font></markup>
seq(0, τ, 128)   <markup><font color="DarkGreen">-- A uniform grid with 128 intervals.</font></markup>
seq(v)           <markup><font color="DarkGreen">-- A sequence from a vector.</font></markup>
seq::random(10)  <markup><font color="DarkGreen">-- A sequence with 10 random values.</font></markup>
seq::nrandom(10) <markup><font color="DarkGreen">-- A sequence with 10 Gaussian random values.</font></markup>
				  </code>
				  <para><codeInline>seq::nrandom</codeInline> is overloaded so you can specify either a variance for the sequence, keeping a zero mean, or a variance and a vector of <newTerm>autoregressive</newTerm> coefficients:</para>
		          <code language="Austra">
<markup><font color="DarkGreen">-- A thousand samples from a normal distribution with variance = 2.</font></markup>
seq::nrandom(1000, 2)
<markup><font color="DarkGreen">-- An autoregressive process of order three.</font></markup>
seq::nrandom(1000, 1, [0.1, 0.05, 0.01])
				  </code>
				  <para>You can materialize the content of a sequence as a vector using the <codeInline>toVector</codeInline> property:</para>
		          <code language="Austra">
seq::random(10).toVector
				  </code>
              </content>
          </section>
          <section address="SubSection2">
              <title>Methods and properties</title>
              <content>
                  <para>These are the methods that can be used with a sequence:</para>
		<table>
 		  <row>
 		    <entry><para><codeInline>seq::any</codeInline></para></entry>
 		    <entry><para>Checks if there is a item in the sequence satisfying a predicate.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>seq::all</codeInline></para></entry>
 		    <entry><para>Checks if all items in the sequence satisfy a predicate.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>seq::filter</codeInline></para></entry>
 		    <entry><para>Returns items of the original sequence satisfying a predicate.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>seq::map</codeInline></para></entry>
 		    <entry><para>Transforms items with the help of a lambda function.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>vector::zip</codeInline></para></entry>
 		    <entry><para>Combines two sequences using a lambda function.</para></entry>
		  </row>
 		  <row>
 		    <entry><para><codeInline>vector::reduce</codeInline></para></entry>
 		    <entry><para>Conflates all values in a sequence using a lambda.</para></entry>
		  </row>
		</table>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sequence operators</title>
              <content>
                  <para>Sequence operators mimics most of vector's operators.</para>
		          <code language="Austra">
seq(1, 10) * seq(10, 1)  <markup><font color="DarkGreen">-- The dot product.</font></markup>
				  </code>
                  <para>For instance, simple operators can be used to change the underlying distribution of a random sequence.</para>
		          <code language="Austra">
seq::random(100) * 2 - 1
<markup><font color="DarkGreen">-- Check the moments of the above distribution.</font></markup>
(seq::random(100) * 2 - 1).stats
				  </code>
				  <alert class="note">
				  <para>Unary operators for sequences could, in theory, be implemented using <codeInline>map</codeInline>, and binary operators can also be written using <codeInline>map</codeInline>.</para>
				  <para>However, in most cases, having an explicit operator results in a faster implementation. It is most evident for sequences backed by a vector, but it also happens for other kinds of sequences. For instance, when a range or grid sequence is negated, you can implement the result using another range or grid sequence.</para>
				  </alert>
              </content>
          </section>
          <section address="SubSection2">
              <title>Delayed execution</title>
              <content>
                  <para>Sequence operators mimics most of vector's operators.</para>
              </content>
          </section>
      </sections>
    </section>
    <relatedTopics>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>