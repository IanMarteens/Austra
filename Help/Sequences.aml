<?xml version="1.0" encoding="utf-8"?>
<topic id="d1757dd1-7bbd-4d90-88b9-cc034c5ad326" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Sequences provides most of the operations from real and complex vectors, but avoiding the storage. Sequences are similar to enumerable types in C# with LINQ, and are a requisite for any functional language.</para>
      <para>AUSTRA supports three kinds of sequences: <codeInline>seq</codeInline>, for real valued sequences, <codeInline>cseq</codeInline> for complex ones, and <codeInline>iseq</codeInline>, for integer sequences.</para>
    </introduction>
    <section address="seqs">
      <title>Double-valued sequences as light vectors</title>
      <content>
        <para>Let's say we want to calculate factorials. AUSTRA is a functional language, so we don't have explicit loops. We could, however, do this with a vector:</para>
        <code language="Austra">
        vec(10, i => i + 1).prod
        </code>
        <para>The above code works fine, but it forces the library to allocate one array of ten items. This is the alternative, using a sequence:</para>
        <code language="Austra">
        seq(1, 10).prod
        </code>
        <para>Since the sequence's values are generated only by demand, there's no need for the internal storage.</para>
      </content>
      <sections>
          <section address="seqCtors">
              <title>Sequence constructors</title>
              <content>
                  <para>These are the class methods for <codeInline>seq</codeInline>:</para>
			      <table>
	 		        <row>
	 		          <entry><para><codeInline>seq::new</codeInline></para></entry>
	 		          <entry><para>Creates a sequence, either from a range, a range and a step, or from a vector or matrix. See examples below.</para></entry>
			        </row>
	 		        <row>
	 		          <entry><para><codeInline>seq::random</codeInline></para></entry>
	 		          <entry><para>Creates a sequence of random values.</para></entry>
			        </row>
	 		        <row>
	 		          <entry><para><codeInline>seq::nrandom</codeInline></para></entry>
	 		          <entry><para>Creates a sequence of random values, using a normal distribution.</para></entry>
			        </row>
	 		        <row>
	 		          <entry><para><codeInline>seq::ar</codeInline></para></entry>
	 		          <entry><para>Creates a sequence using an AutoRegressive process.</para></entry>
			        </row>
	 		        <row>
	 		          <entry><para><codeInline>seq::ma</codeInline></para></entry>
	 		          <entry><para>Creates a sequence using a Moving Average process.</para></entry>
			        </row>
	 		        <row>
	 		          <entry><para><codeInline>seq::unfold</codeInline></para></entry>
	 		          <entry><para>Generate values from a seed and a generating function.</para></entry>
			        </row>
			      </table>
                  <para>This code fragment shows some of the available constructors for sequences:</para>
		          <code language="Austra">
seq(1, 10);         <markup><font color="DarkGreen">-- Numbers from 1 to 10.</font></markup>
seq(10, 1);         <markup><font color="DarkGreen">-- The inverted sequence.</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>new(1, 10);    <markup><font color="DarkGreen">-- ::new was omitted before.</font></markup>
seq(0, 128, τ);     <markup><font color="DarkGreen">-- A uniform grid with 128 intervals.</font></markup>
seq(v);             <markup><font color="DarkGreen">-- A sequence from a vector.</font></markup>
seq([sqrt(2), e, π, τ]);
seq(v1^v2);         <markup><font color="DarkGreen">-- A sequence from a matrix.</font></markup>
<markup><b><font color="DarkCyan">seq::</font></b></markup>random(10);    <markup><font color="DarkGreen">-- A sequence with 10 random values.</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>nrandom(10),   <markup><font color="DarkGreen">-- A sequence with 10 Gaussian random values.</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>nrandom(10, 2) <markup><font color="DarkGreen">-- Ten normal samples with variance = 2.</font></markup>
				  </code>
				  <para>Real sequences created with just a lower and an upper bound are always based on integer bounds. For instance, these two expressions represent the same real sequence:</para>
		          <code language="Austra">
seq(1, 10);         <markup><font color="DarkGreen">-- Numbers from 1 to 10.</font></markup>
seq(1.5, 10.6);     <markup><font color="DarkGreen">-- Numbers from 1 to 10, too.</font></markup>
		          </code>
				  <para>The reason for this rule is that these sequences have always one unit as their step. It is easier to reason about their behaviour knowing that their boundaries always are integer values.</para>
				  <para>There are two additional class methods for generating <codeEntityReference qualifyHint="false" autoUpgrade="true" linkText="autoregressive">M:Austra.Library.DSequence.AR(System.Int32,System.Double,Austra.Library.DVector)</codeEntityReference>, AR(p), and <codeEntityReference qualifyHint="false" autoUpgrade="true" linkText="moving average">M:Austra.Library.DSequence.MA(System.Int32,System.Double,Austra.Library.DVector)</codeEntityReference>, MA(q), sequences:</para>
		          <code language="Austra">
<markup><font color="DarkGreen">-- An autoregressive (AR) process of order three.</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>ar(1000, 1, [0.1, 0.05, 0.01]);
<markup><font color="DarkGreen">-- A moving average (MA) process of order three.
-- The first term in the vector is the model's mean.</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>ma(1000, 1, [0, 0.1, 0.05, 0.01])
				  </code>
				  <para>You can materialize the content of a sequence as a vector using the <codeInline>toVector</codeInline> property:</para>
		          <code language="Austra">
<markup><b><font color="DarkCyan">seq::</font></b></markup>random(10).toVector
				  </code>
              </content>
		    </section>
            <section address="seqUnfold">
              <title>The unfold sequence generator</title>
              <content>
				  <para>Another class method for creating sequences is <codeInline>seq::unfold</codeInline> (see <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Unfold(System.Int32,System.Double,System.Double,System.Func{System.Double,System.Double,System.Double})</codeEntityReference>), which has three variants:</para>
		          <code language="Austra">
<markup><font color="DarkGreen">-- Powers of 2, from 2 to 1024.</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>unfold(10, 2, x =&gt; 2x);
<markup><font color="DarkGreen">-- Maclaurin series for exp(1).</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>unfold(100000, 1, (n, x) =&gt; x / (n + 1)).sum + 1;
<markup><font color="DarkGreen">-- Real-valued Fibonacci sequence.</font><br/>
<b><font color="DarkCyan">seq::</font></b></markup>unfold(50, 1, 1, (x, y) =&gt; x + y);
				  </code>
				  <para>The unfold sequence generator is important for the language since it can express iterative behaviour in a language with no explicit loops and conditionals. The alternative to iteration is recursion, which is also provided by AUSTRA, but a recursive function is almost always more expensive, even in the presence of tail optimizations.</para>
				  <para>Let us consider, for instance, how we would write a function for the greatest common divisor. When learning about function definitions, we saw that we could define a recursive function for this task:</para>
		          <code language="Austra">
<markup><font color="DarkGreen">-- The recursive version</font><br/>
<b>def</b></markup> gcd1:<markup><font color="DarkRed">"Recursive GCD"</font></markup>(a, b: <markup><b>int</b></markup>): <markup><b>int</b></markup> =
    <markup><b>let</b></markup> rm = a % b <markup><b>in</b></markup>
        iff(rm = 0, b, mcd(b, rm))
				  </code>
				  <para>This is a fine recursive definition that even is amenable to tail recursion optimization. Now compare with the iterative alternative:</para>
		          <code language="Austra">
<markup><font color="DarkGreen">-- -- The iterative version</font><br/>
<b>def</b></markup> gcd2:<markup><font color="DarkRed">"Iterative GCD"</font></markup>(a, b: <markup><b>int</b></markup>): <markup><b>int</b></markup> =
    <markup><font color="DarkCyan">iseq::</font></markup>unfold(10000, a, b, (x, y) => x%y).while(x => x > 0).last
				  </code>
				  <para>Even though it looks more verbose, the second definition is almost twice faster than the recursive definition. Note, however, that we have used the class iseq instead of seq, so the property last directly returned an integer value. We could have kept seq by simply adding <codeInline>toInt</codeInline> after calling last:</para>
		          <code language="Austra">
<markup><b>def</b></markup> gcd3:<markup><font color="DarkRed">"Iterative GCD"</font></markup>(a, b: <markup><b>int</b></markup>): <markup><b>int</b></markup> =
    <markup><font color="DarkCyan">seq::</font></markup>unfold(10000, a, b, (x, y) => x%y).while(x => x > 0).last.toInt
				  </code>
				  <para>Still, the advantage of the iterative definition will be huge compared to the recursive definition.</para>
				  <alert class="note">
				  <para>Two things to have into account:</para>
				  <list class="bullet">
				  <listItem>Have we not included the <codeInline>while</codeInline> method, every call to that <codeInline>unfold</codeInline> sequence would end with failure as soon as the algorithm would have tried to divide by zero. The <codeInline>while</codeInline> method avoids that problem and gives as the value we need.</listItem>
				  <listItem>The <codeInline>unfold</codeInline> generator requires a first parameter stating how many values to create. We could have devised a variant of unfold for creating infinite length sequence. I have preferred, however, to put the burden of picking a high enough value on your shoulders. It is security against convenience.</listItem>
				  </list>
				  </alert>
              </content>
          </section>
          <section address="seqMethods">
              <title>Methods and properties</title>
              <content>
				<para>These are the properties supported by sequences of real values:</para>
				<table>
		 		  <row>
		 		    <entry><para><codeInline>acf</codeInline></para></entry>
	 			    <entry><para>The Autocorrelation function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.ACF</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>distinct</codeInline></para></entry>
	 			    <entry><para>Select unique values in the sequence, with no predefined order. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Distinct</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
	 			    <entry><para><codeInline>fft</codeInline></para></entry>
	 			    <entry><para>Calculates a Fast Fourier Transform. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Fft</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>first</codeInline></para></entry>
	 		    	<entry><para>Gets the first term of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.First</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>last</codeInline></para></entry>
			    	<entry><para>Gets the last term of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Last</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
	 			    <entry><para><codeInline>length</codeInline></para></entry>
	 			    <entry><para>Gets the number of elements in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Length</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>max</codeInline></para></entry>
	 		    	<entry><para>Get the maximum value in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Max</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>min</codeInline></para></entry>
	 		    	<entry><para>Get the minimum value in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Min</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>pacf</codeInline></para></entry>
	 			    <entry><para>The Partial Autocorrelation function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.PACF</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>plot</codeInline></para></entry>
	 		    	<entry><para>Plots the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Plot</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>prod</codeInline></para></entry>
	 		    	<entry><para>Multiplies all values in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Product</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>sort</codeInline></para></entry>
		 		    <entry><para>Sorts values in ascending order. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Sort</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
		 		    <entry><para><codeInline>sortDesc</codeInline></para></entry>
	 			    <entry><para>Sorts values in descending order. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.SortDescending</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
	 			    <entry><para><codeInline>stats</codeInline></para></entry>
	 			    <entry><para>Gets all statistic moments of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Stats</codeEntityReference>.</para></entry>
				  </row>		  
	 			  <row>
	 			    <entry><para><codeInline>sum</codeInline></para></entry>
	 		    	<entry><para>Sums all values in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Sum</codeEntityReference>.</para></entry>
				  </row>
	 			  <row>
	 			    <entry><para><codeInline>toVector</codeInline></para></entry>
	 		    	<entry><para>Materializes the sequence into a vector. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.ToVector</codeEntityReference>.</para></entry>
				  </row>
				</table>
                <para>These are the methods that can be used with a sequence of real values:</para>
				<table>
		 		  <row>
		 		    <entry><para><codeInline>all</codeInline></para></entry>
		 		    <entry><para>Checks if all items in the sequence satisfy a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.All(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>any</codeInline></para></entry>
		 		    <entry><para>Checks if there is an item in the sequence satisfying a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Any(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>ar</codeInline></para></entry>
		 		    <entry><para>Estimates coefficients for an AR(p) model. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.AutoRegression(System.Int32)</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>arModel</codeInline></para></entry>
		 		    <entry><para>Creates a full AR(p) model. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.ARModel(System.Int32)</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>filter</codeInline></para></entry>
		 		    <entry><para>Returns items of the original sequence satisfying a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Filter(System.Func{System.Double,System.Boolean})</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>ma</codeInline></para></entry>
		 		    <entry><para>Estimates coefficients for an MA(q) model. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.MovingAverage(System.Int32)</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>maModel</codeInline></para></entry>
		 		    <entry><para>Creates a full MA(q) model. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.MAModel(System.Int32)</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>map</codeInline></para></entry>
		 		    <entry><para>Transforms items with the help of a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Map(System.Func{System.Double,System.Double})</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>reduce</codeInline></para></entry>
		 		    <entry><para>Conflates all values in a sequence using a lambda. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Reduce(`0,System.Func{`0,`0,`0})</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>until</codeInline></para></entry>
		 		    <entry><para>Returns a prefix of a sequence until a values satisfying a predicate is found. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Until(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>while</codeInline></para></entry>
		 		    <entry><para>Returns a prefix of a sequence while values satisfy a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.While(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
				  </row>
		 		  <row>
		 		    <entry><para><codeInline>zip</codeInline></para></entry>
		 		    <entry><para>Combines two sequences using a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.DSequence.Zip(Austra.Library.DSequence,System.Func{System.Double,System.Double,System.Double})</codeEntityReference>.</para></entry>
				  </row>
				</table>
				<para>As seen before, the <codeInline>while</codeInline> method excludes from its returning sequence the first value satisfying its predicate. On the contrary, <codeInline>until</codeInline> includes that very value in the returning sequence.</para>
              </content>
          </section>
          <section address="seqOps">
              <title>Sequence operators</title>
              <content>
                  <para>Sequence operators mimics most of vector's operators.</para>
		          <code language="Austra">
seq(1, 10) * seq(10, 1)  <markup><font color="DarkGreen">-- The dot product.</font></markup>
				  </code>
                  <para>For instance, simple operators can be used to change the underlying distribution of a random sequence.</para>
		          <code language="Austra">
<markup><b><font color="DarkCyan">seq::</font></b></markup>random(100) * 2 - 1;
<markup><font color="DarkGreen">-- Check the moments of the above distribution.</font></markup>
(<markup><b><font color="DarkCyan">seq::</font></b></markup>random(100) * 2 - 1).stats
				  </code>
				  <alert class="note">
				  <para>Unary operators for sequences could, in theory, be implemented using <codeInline>map</codeInline>, and binary operators can also be written using <codeInline>zip</codeInline>.</para>
				  <para>However, in most cases, having an explicit operator results in a faster implementation. It is most evident for sequences backed by a vector, but it also happens for other kinds of sequences. For instance, when a range or grid sequence is negated, you can implement the result using another range or grid sequence.</para>
				  </alert>
              </content>
          </section>
      </sections>
    </section>
    <section address="iseqs">
      <title>Integer sequences</title>
      <content>
        <para>Integer sequences are represented by the <codeInline>iseq</codeInline> class.</para>
        <sections>
          <section address="iseqCtors">
            <title>Class methods</title>
            <content>
              <para>These are the class methods supported by <codeInline>iseq</codeInline>:</para>
			  <table>
	 		    <row>
	 		      <entry><para><codeInline>iseq::new</codeInline></para></entry>
	 		      <entry><para>Creates a sequence, either from a range, a range and a step, or from an integer vector.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>iseq::random</codeInline></para></entry>
	 		      <entry><para>Creates a sequence of random integers. You can pass an upper bound, or an interval for values.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>iseq::unfold</codeInline></para></entry>
	 		      <entry><para>Similar to <codeInline>seq::unfold</codeInline>, but with integer arguments.</para></entry>
			    </row>
			  </table>
            </content>
          </section>
          <section address="iseqMethods">
            <title>Methods and properties</title>
            <content>
              <para>These properties can be used with integer sequences:</para>
			  <table>
	 		    <row>
	 		      <entry><para><codeInline>distinct</codeInline></para></entry>
	 		      <entry><para>Select unique values in the sequence, with no predefined order. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Distinct</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>first</codeInline></para></entry>
	 		      <entry><para>Gets the first term of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.First</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>last</codeInline></para></entry>
	 		      <entry><para>Gets the last term of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Last</codeEntityReference>.</para></entry>
	 		    </row>
	 		    <row>
	 		      <entry><para><codeInline>length</codeInline></para></entry>
	 		      <entry><para>Gets the number of elements in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Length</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>max</codeInline></para></entry>
	 		      <entry><para>Get the maximum value in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Max</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>min</codeInline></para></entry>
	 		      <entry><para>Get the minimum value in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Min</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>plot</codeInline></para></entry>
	 		      <entry><para>Plots the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Plot</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>prod</codeInline></para></entry>
	 		      <entry><para>Multiplies all values in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Product</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>sort</codeInline></para></entry>
	 		      <entry><para>Sorts values in ascending order. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Sort</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>sortDesc</codeInline></para></entry>
	 		      <entry><para>Sorts values in descending order. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.SortDescending</codeEntityReference>.</para></entry>
			    </row>
 		  		<row>
 		    	  <entry><para><codeInline>stats</codeInline></para></entry>
 		    	  <entry><para>Gets all statistic moments of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Stats</codeEntityReference>.</para></entry>
		  		</row>		  
	 		    <row>
	 		      <entry><para><codeInline>sum</codeInline></para></entry>
	 		      <entry><para>Sums all values in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Sum</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>toVector</codeInline></para></entry>
	 		      <entry><para>Materializes the sequence into a vector. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.ToVector</codeEntityReference>.</para></entry>
			    </row>
			  </table>
			  <para>These are the available methods:</para>
			  <table>
	 		    <row>
	 		      <entry><para><codeInline>all</codeInline></para></entry>
	 		      <entry><para>Checks if all items in the sequence satisfy a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.All(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>any</codeInline></para></entry>
	 		      <entry><para>Checks if there is an item in the sequence satisfying a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Any(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>filter</codeInline></para></entry>
	 		      <entry><para>Returns items of the original sequence satisfying a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Filter(System.Func{System.Int32,System.Boolean})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>map</codeInline></para></entry>
	 		      <entry><para>Transforms items with the help of a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Map(System.Func{System.Int32,System.Int32})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>mapReal</codeInline></para></entry>
	 		      <entry><para>Transforms items with the help of a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.MapReal(System.Func{System.Int32,System.Double})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>reduce</codeInline></para></entry>
	 		      <entry><para>Conflates all values in a sequence using a lambda. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Reduce(`0,System.Func{`0,`0,`0})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
 		    	  <entry><para><codeInline>until</codeInline></para></entry>
 		    	  <entry><para>Returns a prefix of a sequence until a values satisfying a predicate is found. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Until(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>while</codeInline></para></entry>
 		    	  <entry><para>Returns a prefix of a sequence while values satisfy a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.While(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
		  		</row>
	 		    <row>
	 		      <entry><para><codeInline>zip</codeInline></para></entry>
	 		      <entry><para>Combines two sequences using a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.NSequence.Zip(Austra.Library.NSequence,System.Func{System.Int32,System.Int32,System.Int32})</codeEntityReference>.</para></entry>
			    </row>
			  </table>
			  <para>This example shows how to calculate the Collatz sequence using integer sequences:</para>
			  <code language="Austra">
<markup><b>let</b></markup> collatz(n: <markup><b>int</b></markup>) =
	<markup><b><font color="DarkCyan">iseq::</font></b></markup>unfold(1000000, n, x => iff(x % 2 = 0, x / 2, 3x + 1))
	.until(x => x = 1);
collatz(137)
			  </code>
			  <para>Though the generator is created with a big enough upper limit, the sequence stops when a <codeInline>1</codeInline> is generated. The <codeInline>until</codeInline> method can also be written this way:</para>
			  <code language="Austra">
<markup><b>let</b></markup> collatz(n: <markup><b>int</b></markup>) =
	<markup><b><font color="DarkCyan">iseq::</font></b></markup>unfold(1000000, n, x => iff(x % 2 = 0, x / 2, 3x + 1))
	.until(1)
			  </code>
            </content>
          </section>
        </sections>
      </content>
    </section>
    <section address="cseqs">
      <title>Complex sequences</title>
      <content>
        <para>Complex sequences can also be used, with the <codeInline>cseq</codeInline> class.</para>
        <sections>
          <section address="cseqCtors">
            <title>Class methods</title>
            <content>
              <para>These are the class methods supported by <codeInline>cseq</codeInline>:</para>
			  <table>
	 		    <row>
	 		      <entry><para><codeInline>cseq::new</codeInline></para></entry>
	 		      <entry><para>Creates a sequence, either from a complex interval, or from a complex vector.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>cseq::random</codeInline></para></entry>
	 		      <entry><para>Creates a sequence of random values from a uniform distribution.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>cseq::nrandom</codeInline></para></entry>
	 		      <entry><para>Creates a sequence of random values with a standard normal distribution.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>cseq::unfold</codeInline></para></entry>
	 		      <entry><para>Similar to <codeInline>seq::unfold</codeInline>, but with complex arguments.</para></entry>
			    </row>
			  </table>
            </content>
          </section>
          <section address="cseqMethods">
            <title>Methods and properties</title>
            <content>
              <para>These properties can be used with complex sequences:</para>
			  <table>
	 		    <row>
	 		      <entry><para><codeInline>distinct</codeInline></para></entry>
	 		      <entry><para>Select unique values in the sequence, with no predefined order. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.CSequence.Distinct</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>first</codeInline></para></entry>
	 		      <entry><para>Gets the first term of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.First</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>last</codeInline></para></entry>
	 		      <entry><para>Gets the last term of the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Last</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>length</codeInline></para></entry>
	 		      <entry><para>Gets the number of elements in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Length</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>plot</codeInline></para></entry>
	 		      <entry><para>Plots the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.CSequence.Plot</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>prod</codeInline></para></entry>
	 		      <entry><para>Multiplies all values in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Product</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>sum</codeInline></para></entry>
	 		      <entry><para>Sums all values in the sequence. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Sum</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>toVector</codeInline></para></entry>
	 		      <entry><para>Materializes the sequence into a complex vector. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.CSequence.ToVector</codeEntityReference>.</para></entry>
			    </row>
			  </table>
			  <para>And these are the available methods:</para>
			  <table>
	 		    <row>
	 		      <entry><para><codeInline>all</codeInline></para></entry>
	 		      <entry><para>Checks if all items in the sequence satisfy a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.All(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>any</codeInline></para></entry>
	 		      <entry><para>Checks if there is an item in the sequence satisfying a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Any(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>filter</codeInline></para></entry>
	 		      <entry><para>Returns items of the original sequence satisfying a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.CSequence.Filter(System.Func{System.Numerics.Complex,System.Boolean})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>map</codeInline></para></entry>
	 		      <entry><para>Transforms items with the help of a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.CSequence.Map(System.Func{System.Numerics.Complex,System.Numerics.Complex})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>mapReal</codeInline></para></entry>
	 		      <entry><para>Transforms items with the help of a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.CSequence.MapReal(System.Func{System.Numerics.Complex,System.Double})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
	 		      <entry><para><codeInline>reduce</codeInline></para></entry>
	 		      <entry><para>Conflates all values in a sequence using a lambda. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Reduce(`0,System.Func{`0,`0,`0})</codeEntityReference>.</para></entry>
			    </row>
	 		    <row>
 		    	  <entry><para><codeInline>until</codeInline></para></entry>
 		    	  <entry><para>Returns a prefix of a sequence until a values satisfying a predicate is found. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.Until(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
		  		</row>
 		  		<row>
 		    	  <entry><para><codeInline>while</codeInline></para></entry>
 		    	  <entry><para>Returns a prefix of a sequence while values satisfy a predicate. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.Sequence`2.While(System.Func{`0,System.Boolean})</codeEntityReference>.</para></entry>
		  		</row>
	 		    <row>
	 		      <entry><para><codeInline>zip</codeInline></para></entry>
	 		      <entry><para>Combines two sequences using a lambda function. See <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Austra.Library.CSequence.Zip(Austra.Library.CSequence,System.Func{System.Numerics.Complex,System.Numerics.Complex,System.Numerics.Complex})</codeEntityReference>.</para></entry>
			    </row>
			  </table>
            </content>
          </section>
        </sections>
      </content>
    </section>
    <section address="delayed">
       <title>Delayed execution</title>
       <content>
          <para>Sequence are modeled after .NET LINQ enumerables, and so many other functional libraries. One of the most interesting features of these libraries is <newTerm>delayed execution</newTerm>.</para>
          <para>Applying a method or an operator on a sequence does not means that it will automatically scan the sequence values. Let's start with a simple example:</para>
	      <code language="Austra">
-seq(1, 1000)
		  </code>
          <para>The above code first creates a sequence that will enumerate numbers from 1 to 1000. Creating the sequence means creating a small instance of an internal class that can be called later to yield the values in the sequence. The unary minus, however, take that sequence generator and returns another generator that yields values in descending order, from the interval <math>[-10, -1]</math>. It does not forces yet the sequence enumeration. Actually, enumeration takes place as the last operation, as you hit F5 in the AUSTRA desktop, as the application needs to print the values created by the expression. The same would happen with this expression, that plots the sequence as a series:</para>
	      <code language="Austra">
(-seq(1, 1000)).plot
		  </code>
		  <para>It is the <codeInline>plot</codeInline> method the trigger which starts the internal loop for generating all the values. You could even intercalate another method call before the plot, without triggering enumeration:</para>
	      <code language="Austra">
<markup><font color="DarkGreen">-- Sort the negated values in ascending order.</font></markup>
(-seq(1, 1000)).sort.plot;
<markup><font color="DarkGreen">-- Square values, select multiples of three and sort descending.</font></markup>
seq(1, 1000).map(x => x^2).filter(x => x % 3 = 0).sortDesc.plot;
<markup><font color="DarkGreen">-- Methods like sum, prod, any, all or first can also trigger evaluation.</font></markup>
seq(1, 100).filter(x => x % 2 = 0).map(x => x^2).sum
		  </code>
        </content>
    </section>
    <relatedTopics>
      <codeEntityReference qualifyHint="false">T:Austra.Library.Sequence`2</codeEntityReference>
      <link xlink:href="e22b4127-e7a9-47ca-bd1c-7ac81efcc051">Primitive types</link>
	  <link xlink:href="90cb2899-abcf-4ebe-b96a-8cfac1b2809f">Code definitions</link>
      <link xlink:href="8b381718-bf08-4762-a51b-1516af27bef2">Local variables</link>
      <link xlink:href="9ebcc778-37a1-4313-87f9-1ea37494d2c8">Lambda functions</link>
      <link xlink:href="1800e13a-baf2-48f8-aefa-746082fe23df">Time series</link>
      <link xlink:href="aae4328b-9ead-40dc-b407-54e8d0614cd5">Vectors</link>
      <link xlink:href="e9d3be4d-ac7d-4b8e-b892-c47a5a0beb49">Matrices</link>
      <link xlink:href="95cad3a9-e319-4787-a66b-596e34e6ddd6">List comprehensions</link>
      <link xlink:href="008dce7e-55cd-4c37-997b-b0463d7c24d0">Splines</link>
      <link xlink:href="e7993a1e-f2c5-4eb0-aa47-0a3f620375fc">Models</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>